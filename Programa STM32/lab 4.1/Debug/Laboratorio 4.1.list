
Laboratorio 4.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  0000b154  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08009ff4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002300  20000154  0800a148  0000b154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002454  0800a148  0000b454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165d2  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003857  00000000  00000000  00021756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd2  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c46  00000000  00000000  0002741a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab5b  00000000  00000000  00041060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934a2  00000000  00000000  0005bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  000ef0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f4c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091a0 	.word	0x080091a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	080091a0 	.word	0x080091a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <TransmitirDatos>:




void TransmitirDatos(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - lastTime >= 200) {
 8000584:	f001 f800 	bl	8001588 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <TransmitirDatos+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2bc7      	cmp	r3, #199	@ 0xc7
 8000592:	d913      	bls.n	80005bc <TransmitirDatos+0x3c>
        lastTime = HAL_GetTick();
 8000594:	f000 fff8 	bl	8001588 <HAL_GetTick>
 8000598:	4603      	mov	r3, r0
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <TransmitirDatos+0x40>)
 800059c:	6013      	str	r3, [r2, #0]

        sprintf(texto1, "rpm %lu\n", rpm);
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <TransmitirDatos+0x44>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4908      	ldr	r1, [pc, #32]	@ (80005c8 <TransmitirDatos+0x48>)
 80005a6:	4809      	ldr	r0, [pc, #36]	@ (80005cc <TransmitirDatos+0x4c>)
 80005a8:	f008 f95a 	bl	8008860 <siprintf>
        CDC_Transmit_FS(texto1, strlen(texto1));
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <TransmitirDatos+0x4c>)
 80005ae:	f7ff fe17 	bl	80001e0 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4619      	mov	r1, r3
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <TransmitirDatos+0x4c>)
 80005b8:	f007 fd00 	bl	8007fbc <CDC_Transmit_FS>


    }
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200002f0 	.word	0x200002f0
 80005c4:	200002e6 	.word	0x200002e6
 80005c8:	080091b8 	.word	0x080091b8
 80005cc:	200002a4 	.word	0x200002a4

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 ff71 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f9c1 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 fb43 	bl	8000c68 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e2:	f000 fa25 	bl	8000a30 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005e6:	f000 fa51 	bl	8000a8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ea:	f000 faa1 	bl	8000b30 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005ee:	f007 fc27 	bl	8007e40 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80005f2:	f000 faeb 	bl	8000bcc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80005f6:	4879      	ldr	r0, [pc, #484]	@ (80007dc <main+0x20c>)
 80005f8:	f003 fe52 	bl	80042a0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80005fc:	4878      	ldr	r0, [pc, #480]	@ (80007e0 <main+0x210>)
 80005fe:	f003 fe4f 	bl	80042a0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000602:	4878      	ldr	r0, [pc, #480]	@ (80007e4 <main+0x214>)
 8000604:	f003 fe4c 	bl	80042a0 <HAL_TIM_Base_Start>
  ssd1306_Init();
 8000608:	f000 fbcc 	bl	8000da4 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0){
 800060c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000610:	4875      	ldr	r0, [pc, #468]	@ (80007e8 <main+0x218>)
 8000612:	f001 fa7f 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	f040 8081 	bne.w	8000720 <main+0x150>
		  lectura = 0;
 800061e:	4b73      	ldr	r3, [pc, #460]	@ (80007ec <main+0x21c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	  while (lectura == 0) {
 8000624:	e078      	b.n	8000718 <main+0x148>

		 while (bites < 13) {
			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
				  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8000626:	4b6f      	ldr	r3, [pc, #444]	@ (80007e4 <main+0x214>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24
			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
 800062e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000632:	486d      	ldr	r0, [pc, #436]	@ (80007e8 <main+0x218>)
 8000634:	f001 fa6e 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d0f3      	beq.n	8000626 <main+0x56>

			  }

			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0) {
 800063e:	e001      	b.n	8000644 <main+0x74>
				  // Espera que termine el pulso bajo
				uint8_t entrada = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	71bb      	strb	r3, [r7, #6]
			  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0) {
 8000644:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000648:	4867      	ldr	r0, [pc, #412]	@ (80007e8 <main+0x218>)
 800064a:	f001 fa63 	bl	8001b14 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f5      	beq.n	8000640 <main+0x70>
			  }

			  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	4863      	ldr	r0, [pc, #396]	@ (80007e8 <main+0x218>)
 800065a:	f001 fa5b 	bl	8001b14 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d117      	bne.n	8000694 <main+0xc4>
				tiempoInicio = __HAL_TIM_GET_COUNTER(&htim5);
 8000664:	4b5f      	ldr	r3, [pc, #380]	@ (80007e4 <main+0x214>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066a:	4a61      	ldr	r2, [pc, #388]	@ (80007f0 <main+0x220>)
 800066c:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(&htim5, 0);
 800066e:	4b5d      	ldr	r3, [pc, #372]	@ (80007e4 <main+0x214>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
				binario[bites] = tiempoInicio;
 8000676:	4b5e      	ldr	r3, [pc, #376]	@ (80007f0 <main+0x220>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4b5e      	ldr	r3, [pc, #376]	@ (80007f4 <main+0x224>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	b289      	uxth	r1, r1
 8000682:	4b5d      	ldr	r3, [pc, #372]	@ (80007f8 <main+0x228>)
 8000684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				bites +=1;
 8000688:	4b5a      	ldr	r3, [pc, #360]	@ (80007f4 <main+0x224>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b58      	ldr	r3, [pc, #352]	@ (80007f4 <main+0x224>)
 8000692:	701a      	strb	r2, [r3, #0]
		 while (bites < 13) {
 8000694:	4b57      	ldr	r3, [pc, #348]	@ (80007f4 <main+0x224>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b0c      	cmp	r3, #12
 800069a:	d9c8      	bls.n	800062e <main+0x5e>
			  }
		  }


		 for(uint8_t i = 1; i < 8 ; i++){
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	e021      	b.n	80006e6 <main+0x116>

			 if((binario[i] > 19)){
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4a54      	ldr	r2, [pc, #336]	@ (80007f8 <main+0x228>)
 80006a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006aa:	2b13      	cmp	r3, #19
 80006ac:	d905      	bls.n	80006ba <main+0xea>
				 binario[i] = 1;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4a51      	ldr	r2, [pc, #324]	@ (80007f8 <main+0x228>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006b8:	e004      	b.n	80006c4 <main+0xf4>
			 }
			 else{
				 binario[i] = 0;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4a4e      	ldr	r2, [pc, #312]	@ (80007f8 <main+0x228>)
 80006be:	2100      	movs	r1, #0
 80006c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 }

			 valorDecimal = (valorDecimal << 1) | binario[i];
 80006c4:	4b4d      	ldr	r3, [pc, #308]	@ (80007fc <main+0x22c>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	494a      	ldr	r1, [pc, #296]	@ (80007f8 <main+0x228>)
 80006d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b21b      	sxth	r3, r3
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b47      	ldr	r3, [pc, #284]	@ (80007fc <main+0x22c>)
 80006de:	801a      	strh	r2, [r3, #0]
		 for(uint8_t i = 1; i < 8 ; i++){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3301      	adds	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	d9da      	bls.n	80006a2 <main+0xd2>

		 }

		 instruccion = valorDecimal;
 80006ec:	4b43      	ldr	r3, [pc, #268]	@ (80007fc <main+0x22c>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <main+0x230>)
 80006f4:	701a      	strb	r2, [r3, #0]
		 comando  = valorDecimal;
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <main+0x22c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b41      	ldr	r3, [pc, #260]	@ (8000804 <main+0x234>)
 80006fe:	701a      	strb	r2, [r3, #0]

		  bites = 0;
 8000700:	4b3c      	ldr	r3, [pc, #240]	@ (80007f4 <main+0x224>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
		  tiempoInicio = 0;
 8000706:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <main+0x220>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
		  valorDecimal = 0;
 800070c:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <main+0x22c>)
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]

		  lectura = 1;
 8000712:	4b36      	ldr	r3, [pc, #216]	@ (80007ec <main+0x21c>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	  while (lectura == 0) {
 8000718:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <main+0x21c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0b9      	beq.n	8000694 <main+0xc4>


	  }


	  if(instruccion == 84){
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <main+0x230>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b54      	cmp	r3, #84	@ 0x54
 8000726:	d109      	bne.n	800073c <main+0x16c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	482e      	ldr	r0, [pc, #184]	@ (80007e8 <main+0x218>)
 800072e:	f001 fa09 	bl	8001b44 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <main+0x218>)
 8000738:	f001 fa04 	bl	8001b44 <HAL_GPIO_WritePin>
		  //instruccion = 0;
	  }
	  if(instruccion == 20){
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <main+0x230>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b14      	cmp	r3, #20
 8000742:	d109      	bne.n	8000758 <main+0x188>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2110      	movs	r1, #16
 8000748:	4827      	ldr	r0, [pc, #156]	@ (80007e8 <main+0x218>)
 800074a:	f001 f9fb 	bl	8001b44 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	4825      	ldr	r0, [pc, #148]	@ (80007e8 <main+0x218>)
 8000754:	f001 f9f6 	bl	8001b44 <HAL_GPIO_WritePin>
		  //instruccion = 0;

	  }
	  if(instruccion == 54){
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <main+0x230>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b36      	cmp	r3, #54	@ 0x36
 800075e:	d109      	bne.n	8000774 <main+0x1a4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <main+0x218>)
 8000766:	f001 f9ed 	bl	8001b44 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2120      	movs	r1, #32
 800076e:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <main+0x218>)
 8000770:	f001 f9e8 	bl	8001b44 <HAL_GPIO_WritePin>
		  //instruccion = 0;

	  }
	  if(instruccion == 104){
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <main+0x230>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b68      	cmp	r3, #104	@ 0x68
 800077a:	d102      	bne.n	8000782 <main+0x1b2>
		  encoder = 1;
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <main+0x238>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
		  //instruccion = 0;

	  }
	  if(instruccion == 52){
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <main+0x230>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b34      	cmp	r3, #52	@ 0x34
 8000788:	d102      	bne.n	8000790 <main+0x1c0>
		  encoder = 0;
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <main+0x238>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		  //instruccion = 0;
	  }

	  A_ahora = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000794:	481d      	ldr	r0, [pc, #116]	@ (800080c <main+0x23c>)
 8000796:	f001 f9bd 	bl	8001b14 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <main+0x240>)
 80007a0:	701a      	strb	r2, [r3, #0]
	  B_ahora = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80007a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a6:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <main+0x218>)
 80007a8:	f001 f9b4 	bl	8001b14 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <main+0x244>)
 80007b2:	701a      	strb	r2, [r3, #0]


	  if (A_ahora!= ultimo_A) {
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <main+0x240>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <main+0x248>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d034      	beq.n	800082a <main+0x25a>
		  if (A_ahora == 1) {
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <main+0x240>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d130      	bne.n	800082a <main+0x25a>
			  if (B_ahora == 0) {
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <main+0x244>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d127      	bne.n	8000820 <main+0x250>
				  contador--;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <main+0x24c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <main+0x24c>)
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e026      	b.n	800082a <main+0x25a>
 80007dc:	200001c4 	.word	0x200001c4
 80007e0:	2000020c 	.word	0x2000020c
 80007e4:	20000254 	.word	0x20000254
 80007e8:	40020400 	.word	0x40020400
 80007ec:	200002f5 	.word	0x200002f5
 80007f0:	200002f8 	.word	0x200002f8
 80007f4:	200002f6 	.word	0x200002f6
 80007f8:	200002fc 	.word	0x200002fc
 80007fc:	20000316 	.word	0x20000316
 8000800:	200002e5 	.word	0x200002e5
 8000804:	200002f4 	.word	0x200002f4
 8000808:	200002e4 	.word	0x200002e4
 800080c:	40020000 	.word	0x40020000
 8000810:	200002ec 	.word	0x200002ec
 8000814:	200002ed 	.word	0x200002ed
 8000818:	200002ea 	.word	0x200002ea
 800081c:	20000004 	.word	0x20000004
			  } else {
				  contador++;
 8000820:	4b3e      	ldr	r3, [pc, #248]	@ (800091c <main+0x34c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a3d      	ldr	r2, [pc, #244]	@ (800091c <main+0x34c>)
 8000828:	6013      	str	r3, [r2, #0]
			  }
		  }
	  }


	  ultimo_A = A_ahora;
 800082a:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <main+0x350>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b3d      	ldr	r3, [pc, #244]	@ (8000924 <main+0x354>)
 8000830:	701a      	strb	r2, [r3, #0]
	  ultimo_B = B_ahora;
 8000832:	4b3d      	ldr	r3, [pc, #244]	@ (8000928 <main+0x358>)
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	4b3d      	ldr	r3, [pc, #244]	@ (800092c <main+0x35c>)
 8000838:	701a      	strb	r2, [r3, #0]


	  if (set == 1){
 800083a:	4b3d      	ldr	r3, [pc, #244]	@ (8000930 <main+0x360>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10a      	bne.n	8000858 <main+0x288>
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000842:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <main+0x364>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
		  __HAL_TIM_SET_COUNTER(&htim3, 0);
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <main+0x368>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
		  set =0;
 8000852:	4b37      	ldr	r3, [pc, #220]	@ (8000930 <main+0x360>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
	  }

	  if(__HAL_TIM_GET_COUNTER(&htim3)>=1000){
 8000858:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <main+0x368>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800085e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000862:	d352      	bcc.n	800090a <main+0x33a>
		 __HAL_TIM_SET_COUNTER(&htim3,0);
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <main+0x368>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
		 pulsos = (__HAL_TIM_GET_COUNTER(&htim2))/2;
 800086c:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <main+0x364>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000872:	085b      	lsrs	r3, r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b31      	ldr	r3, [pc, #196]	@ (800093c <main+0x36c>)
 8000878:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SET_COUNTER(&htim2,0);
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <main+0x364>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
		 rpm = pulsos*60;
 8000882:	4b2e      	ldr	r3, [pc, #184]	@ (800093c <main+0x36c>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <main+0x370>)
 8000892:	801a      	strh	r2, [r3, #0]


		 ssd1306_Fill(Black);
 8000894:	2000      	movs	r0, #0
 8000896:	f000 faef 	bl	8000e78 <ssd1306_Fill>

		 ssd1306_SetCursor(2, 5);
 800089a:	2105      	movs	r1, #5
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fc35 	bl	800110c <ssd1306_SetCursor>
		 sprintf(buffer, "RPM: %ld", rpm);
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <main+0x370>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4926      	ldr	r1, [pc, #152]	@ (8000944 <main+0x374>)
 80008aa:	4827      	ldr	r0, [pc, #156]	@ (8000948 <main+0x378>)
 80008ac:	f007 ffd8 	bl	8008860 <siprintf>
		 ssd1306_WriteString(buffer, Font_11x18, White);
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <main+0x37c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b8:	4823      	ldr	r0, [pc, #140]	@ (8000948 <main+0x378>)
 80008ba:	f000 fc01 	bl	80010c0 <ssd1306_WriteString>

		 ssd1306_SetCursor(2, 25);
 80008be:	2119      	movs	r1, #25
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fc23 	bl	800110c <ssd1306_SetCursor>
		 sprintf(buffer, "Cont: %ld", contador);
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <main+0x34c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4920      	ldr	r1, [pc, #128]	@ (8000950 <main+0x380>)
 80008ce:	481e      	ldr	r0, [pc, #120]	@ (8000948 <main+0x378>)
 80008d0:	f007 ffc6 	bl	8008860 <siprintf>
		 ssd1306_WriteString(buffer, Font_11x18, White);
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <main+0x37c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	9200      	str	r2, [sp, #0]
 80008da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008dc:	481a      	ldr	r0, [pc, #104]	@ (8000948 <main+0x378>)
 80008de:	f000 fbef 	bl	80010c0 <ssd1306_WriteString>

		 ssd1306_SetCursor(2, 45);
 80008e2:	212d      	movs	r1, #45	@ 0x2d
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fc11 	bl	800110c <ssd1306_SetCursor>
		 sprintf(buffer, "Cmd: #%d", comando);
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <main+0x384>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4919      	ldr	r1, [pc, #100]	@ (8000958 <main+0x388>)
 80008f2:	4815      	ldr	r0, [pc, #84]	@ (8000948 <main+0x378>)
 80008f4:	f007 ffb4 	bl	8008860 <siprintf>
		 ssd1306_WriteString(buffer, Font_11x18, White);
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <main+0x37c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	9200      	str	r2, [sp, #0]
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <main+0x378>)
 8000902:	f000 fbdd 	bl	80010c0 <ssd1306_WriteString>

		 ssd1306_UpdateScreen();
 8000906:	f000 facf 	bl	8000ea8 <ssd1306_UpdateScreen>





	  if(encoder == 1){
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <main+0x38c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	f47f ae7c 	bne.w	800060c <main+0x3c>
		  TransmitirDatos();
 8000914:	f7ff fe34 	bl	8000580 <TransmitirDatos>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0){
 8000918:	e678      	b.n	800060c <main+0x3c>
 800091a:	bf00      	nop
 800091c:	20000004 	.word	0x20000004
 8000920:	200002ec 	.word	0x200002ec
 8000924:	200002ea 	.word	0x200002ea
 8000928:	200002ed 	.word	0x200002ed
 800092c:	200002eb 	.word	0x200002eb
 8000930:	20000000 	.word	0x20000000
 8000934:	200001c4 	.word	0x200001c4
 8000938:	2000020c 	.word	0x2000020c
 800093c:	200002e8 	.word	0x200002e8
 8000940:	200002e6 	.word	0x200002e6
 8000944:	080091c4 	.word	0x080091c4
 8000948:	2000029c 	.word	0x2000029c
 800094c:	08009f8c 	.word	0x08009f8c
 8000950:	080091d0 	.word	0x080091d0
 8000954:	200002f4 	.word	0x200002f4
 8000958:	080091dc 	.word	0x080091dc
 800095c:	200002e4 	.word	0x200002e4

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	@ 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	@ 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f007 ffb0 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <SystemClock_Config+0xc8>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	4a26      	ldr	r2, [pc, #152]	@ (8000a28 <SystemClock_Config+0xc8>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	@ 0x40
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <SystemClock_Config+0xc8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <SystemClock_Config+0xcc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a20      	ldr	r2, [pc, #128]	@ (8000a2c <SystemClock_Config+0xcc>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <SystemClock_Config+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009d0:	2319      	movs	r3, #25
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009d4:	23c0      	movs	r3, #192	@ 0xc0
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 ffc7 	bl	8003978 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f0:	f000 f998 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2103      	movs	r1, #3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fa29 	bl	8003e68 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a1c:	f000 f982 	bl	8000d24 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3750      	adds	r7, #80	@ 0x50
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <MX_I2C1_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_I2C1_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a6e:	f001 f883 	bl	8001b78 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 f954 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000170 	.word	0x20000170
 8000a84:	40005400 	.word	0x40005400
 8000a88:	00061a80 	.word	0x00061a80

08000a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad0:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000ad2:	f003 fb95 	bl	8004200 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000adc:	f000 f922 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000afa:	f003 fc2b 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f90e 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_TIM2_Init+0xa0>)
 8000b16:	f003 fe0b 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b20:	f000 f900 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001c4 	.word	0x200001c4

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <MX_TIM3_Init+0x98>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b54:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b60:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b76:	f003 fb43 	bl	8004200 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b80:	f000 f8d0 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000b92:	f003 fbdf 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f000 f8c2 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_TIM3_Init+0x94>)
 8000bae:	f003 fdbf 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f000 f8b4 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000020c 	.word	0x2000020c
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000bea:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <MX_TIM5_Init+0x98>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4800-1;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000bf0:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000bf4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000c02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000c12:	f003 faf5 	bl	8004200 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c1c:	f000 f882 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000c2e:	f003 fb91 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c38:	f000 f874 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_TIM5_Init+0x94>)
 8000c4a:	f003 fd71 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f866 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000254 	.word	0x20000254
 8000c64:	40000c00 	.word	0x40000c00

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_GPIO_Init+0xb4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2130      	movs	r1, #48	@ 0x30
 8000cd6:	4812      	ldr	r0, [pc, #72]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cd8:	f000 ff34 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000cdc:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cf2:	f000 fd8b 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cf6:	2330      	movs	r3, #48	@ 0x30
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000d0e:	f000 fd7d 	bl	800180c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af04      	add	r7, sp, #16
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2178      	movs	r1, #120	@ 0x78
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <ssd1306_WriteCommand+0x2c>)
 8000d60:	f001 f84e 	bl	8001e00 <HAL_I2C_Mem_Write>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000170 	.word	0x20000170

08000d70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af04      	add	r7, sp, #16
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d82:	9202      	str	r2, [sp, #8]
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	2240      	movs	r2, #64	@ 0x40
 8000d8e:	2178      	movs	r1, #120	@ 0x78
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <ssd1306_WriteData+0x30>)
 8000d92:	f001 f835 	bl	8001e00 <HAL_I2C_Mem_Write>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000170 	.word	0x20000170

08000da4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000da8:	f7ff ffc2 	bl	8000d30 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000dac:	2064      	movs	r0, #100	@ 0x64
 8000dae:	f000 fbf7 	bl	80015a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f9d6 	bl	8001164 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000db8:	2020      	movs	r0, #32
 8000dba:	f7ff ffc1 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ffbe 	bl	8000d40 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000dc4:	20b0      	movs	r0, #176	@ 0xb0
 8000dc6:	f7ff ffbb 	bl	8000d40 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000dca:	20c8      	movs	r0, #200	@ 0xc8
 8000dcc:	f7ff ffb8 	bl	8000d40 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ffb5 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000dd6:	2010      	movs	r0, #16
 8000dd8:	f7ff ffb2 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ddc:	2040      	movs	r0, #64	@ 0x40
 8000dde:	f7ff ffaf 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000de2:	20ff      	movs	r0, #255	@ 0xff
 8000de4:	f000 f9aa 	bl	800113c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000de8:	20a1      	movs	r0, #161	@ 0xa1
 8000dea:	f7ff ffa9 	bl	8000d40 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000dee:	20a6      	movs	r0, #166	@ 0xa6
 8000df0:	f7ff ffa6 	bl	8000d40 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000df4:	20a8      	movs	r0, #168	@ 0xa8
 8000df6:	f7ff ffa3 	bl	8000d40 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000dfa:	203f      	movs	r0, #63	@ 0x3f
 8000dfc:	f7ff ffa0 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e00:	20a4      	movs	r0, #164	@ 0xa4
 8000e02:	f7ff ff9d 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e06:	20d3      	movs	r0, #211	@ 0xd3
 8000e08:	f7ff ff9a 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff97 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e12:	20d5      	movs	r0, #213	@ 0xd5
 8000e14:	f7ff ff94 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e18:	20f0      	movs	r0, #240	@ 0xf0
 8000e1a:	f7ff ff91 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000e1e:	20d9      	movs	r0, #217	@ 0xd9
 8000e20:	f7ff ff8e 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000e24:	2022      	movs	r0, #34	@ 0x22
 8000e26:	f7ff ff8b 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000e2a:	20da      	movs	r0, #218	@ 0xda
 8000e2c:	f7ff ff88 	bl	8000d40 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000e30:	2012      	movs	r0, #18
 8000e32:	f7ff ff85 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000e36:	20db      	movs	r0, #219	@ 0xdb
 8000e38:	f7ff ff82 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	f7ff ff7f 	bl	8000d40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000e42:	208d      	movs	r0, #141	@ 0x8d
 8000e44:	f7ff ff7c 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000e48:	2014      	movs	r0, #20
 8000e4a:	f7ff ff79 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 f988 	bl	8001164 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f80f 	bl	8000e78 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000e5a:	f000 f825 	bl	8000ea8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ssd1306_Init+0xd0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <ssd1306_Init+0xd0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000e6a:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <ssd1306_Init+0xd0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	711a      	strb	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000718 	.word	0x20000718

08000e78 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <ssd1306_Fill+0x14>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e000      	b.n	8000e8e <ssd1306_Fill+0x16>
 8000e8c:	23ff      	movs	r3, #255	@ 0xff
 8000e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e92:	4619      	mov	r1, r3
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <ssd1306_Fill+0x2c>)
 8000e96:	f007 fd1d 	bl	80088d4 <memset>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000318 	.word	0x20000318

08000ea8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e016      	b.n	8000ee2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3b50      	subs	r3, #80	@ 0x50
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff40 	bl	8000d40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff ff3d 	bl	8000d40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	f7ff ff3a 	bl	8000d40 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	01db      	lsls	r3, r3, #7
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <ssd1306_UpdateScreen+0x4c>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff4a 	bl	8000d70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d9e5      	bls.n	8000eb4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000318 	.word	0x20000318

08000ef8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	460b      	mov	r3, r1
 8000f04:	71bb      	strb	r3, [r7, #6]
 8000f06:	4613      	mov	r3, r2
 8000f08:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db3d      	blt.n	8000f8e <ssd1306_DrawPixel+0x96>
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f16:	d83a      	bhi.n	8000f8e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d11a      	bne.n	8000f54 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	08db      	lsrs	r3, r3, #3
 8000f24:	b2d8      	uxtb	r0, r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	01db      	lsls	r3, r3, #7
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <ssd1306_DrawPixel+0xa4>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b259      	sxtb	r1, r3
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	4603      	mov	r3, r0
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2c9      	uxtb	r1, r1
 8000f4e:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <ssd1306_DrawPixel+0xa4>)
 8000f50:	54d1      	strb	r1, [r2, r3]
 8000f52:	e01d      	b.n	8000f90 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	01db      	lsls	r3, r3, #7
 8000f60:	4413      	add	r3, r2
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <ssd1306_DrawPixel+0xa4>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b259      	sxtb	r1, r3
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	4603      	mov	r3, r0
 8000f82:	01db      	lsls	r3, r3, #7
 8000f84:	4413      	add	r3, r2
 8000f86:	b2c9      	uxtb	r1, r1
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <ssd1306_DrawPixel+0xa4>)
 8000f8a:	54d1      	strb	r1, [r2, r3]
 8000f8c:	e000      	b.n	8000f90 <ssd1306_DrawPixel+0x98>
        return;
 8000f8e:	bf00      	nop
    }
}
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000318 	.word	0x20000318

08000fa0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4638      	mov	r0, r7
 8000faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000fae:	4623      	mov	r3, r4
 8000fb0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b1f      	cmp	r3, #31
 8000fb6:	d902      	bls.n	8000fbe <ssd1306_WriteChar+0x1e>
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fbc:	d901      	bls.n	8000fc2 <ssd1306_WriteChar+0x22>
        return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e077      	b.n	80010b2 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	783b      	ldrb	r3, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	2b80      	cmp	r3, #128	@ 0x80
 8000fce:	dc06      	bgt.n	8000fde <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8000fd2:	885b      	ldrh	r3, [r3, #2]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	787b      	ldrb	r3, [r7, #1]
 8000fd8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000fda:	2b40      	cmp	r3, #64	@ 0x40
 8000fdc:	dd01      	ble.n	8000fe2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e067      	b.n	80010b2 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e04e      	b.n	8001086 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	7879      	ldrb	r1, [r7, #1]
 8000ff0:	fb01 f303 	mul.w	r3, r1, r3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	440b      	add	r3, r1
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	e036      	b.n	8001076 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001018:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b2d8      	uxtb	r0, r3
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4413      	add	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <ssd1306_DrawPixel>
 800103e:	e017      	b.n	8001070 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b2d8      	uxtb	r0, r3
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8001050:	885b      	ldrh	r3, [r3, #2]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	f7ff ff44 	bl	8000ef8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	3301      	adds	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	783b      	ldrb	r3, [r7, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4293      	cmp	r3, r2
 800107e:	d3c3      	bcc.n	8001008 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	3301      	adds	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	787b      	ldrb	r3, [r7, #1]
 8001088:	461a      	mov	r2, r3
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4293      	cmp	r3, r2
 800108e:	d3ab      	bcc.n	8000fe8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	2a00      	cmp	r2, #0
 8001098:	d005      	beq.n	80010a6 <ssd1306_WriteChar+0x106>
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	3a20      	subs	r2, #32
 80010a0:	440a      	add	r2, r1
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	e000      	b.n	80010a8 <ssd1306_WriteChar+0x108>
 80010a6:	783a      	ldrb	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <ssd1306_WriteChar+0x11c>)
 80010ae:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000718 	.word	0x20000718

080010c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	4638      	mov	r0, r7
 80010ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80010ce:	e013      	b.n	80010f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	7818      	ldrb	r0, [r3, #0]
 80010d4:	7e3b      	ldrb	r3, [r7, #24]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	463b      	mov	r3, r7
 80010da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010dc:	f7ff ff60 	bl	8000fa0 <ssd1306_WriteChar>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d002      	beq.n	80010f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	e008      	b.n	8001104 <ssd1306_WriteString+0x44>
        }
        str++;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e7      	bne.n	80010d0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <ssd1306_SetCursor+0x2c>)
 8001122:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <ssd1306_SetCursor+0x2c>)
 800112a:	805a      	strh	r2, [r3, #2]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000718 	.word	0x20000718

0800113c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001146:	2381      	movs	r3, #129	@ 0x81
 8001148:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdf7 	bl	8000d40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fdf3 	bl	8000d40 <ssd1306_WriteCommand>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001174:	23af      	movs	r3, #175	@ 0xaf
 8001176:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <ssd1306_SetDisplayOn+0x38>)
 800117a:	2201      	movs	r2, #1
 800117c:	715a      	strb	r2, [r3, #5]
 800117e:	e004      	b.n	800118a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001180:	23ae      	movs	r3, #174	@ 0xae
 8001182:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <ssd1306_SetDisplayOn+0x38>)
 8001186:	2200      	movs	r2, #0
 8001188:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdd7 	bl	8000d40 <ssd1306_WriteCommand>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000718 	.word	0x20000718

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a19      	ldr	r2, [pc, #100]	@ (8001274 <HAL_I2C_MspInit+0x84>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12b      	bne.n	800126a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122e:	23c0      	movs	r3, #192	@ 0xc0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001232:	2312      	movs	r3, #18
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123e:	2304      	movs	r3, #4
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <HAL_I2C_MspInit+0x8c>)
 800124a:	f000 fadf 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_I2C_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40005400 	.word	0x40005400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a0:	d12d      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	@ (8001358 <HAL_TIM_Base_MspInit+0xd8>)
 80012f8:	f000 fa88 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80012fc:	e026      	b.n	800134c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a16      	ldr	r2, [pc, #88]	@ (800135c <HAL_TIM_Base_MspInit+0xdc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10e      	bne.n	8001326 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
}
 8001324:	e012      	b.n	800134c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM5)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <HAL_TIM_Base_MspInit+0xe0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10d      	bne.n	800134c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_TIM_Base_MspInit+0xd4>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	@ 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	40000400 	.word	0x40000400
 8001360:	40000c00 	.word	0x40000c00

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f8d1 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f001 f9c6 	bl	800275a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20001c08 	.word	0x20001c08

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f007 fa6c 	bl	80088e4 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	20000720 	.word	0x20000720
 8001440:	20002458 	.word	0x20002458

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f007 fa2b 	bl	80088f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f899 	bl	80005d0 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80014ac:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 80014b0:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 80014b4:	20002454 	.word	0x20002454

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f94f 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fe56 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f967 	bl	80017f2 <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f92f 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008
 8001558:	20000010 	.word	0x20000010
 800155c:	2000000c 	.word	0x2000000c

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010
 8001584:	20000724 	.word	0x20000724

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000724 	.word	0x20000724

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000010 	.word	0x20000010

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	@ (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e159      	b.n	8001adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8148 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a2 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a56      	ldr	r2, [pc, #344]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	4a52      	ldr	r2, [pc, #328]	@ (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a49      	ldr	r2, [pc, #292]	@ (8001afc <HAL_GPIO_Init+0x2f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x202>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a48      	ldr	r2, [pc, #288]	@ (8001b00 <HAL_GPIO_Init+0x2f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x1fe>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a47      	ldr	r2, [pc, #284]	@ (8001b04 <HAL_GPIO_Init+0x2f8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a46      	ldr	r2, [pc, #280]	@ (8001b08 <HAL_GPIO_Init+0x2fc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x1f6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a45      	ldr	r2, [pc, #276]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x1f2>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x2ec>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a24      	ldr	r2, [pc, #144]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f aea2 	bls.w	8001828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e12b      	b.n	8001de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fb26 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bdc:	f002 fafc 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8001be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a81      	ldr	r2, [pc, #516]	@ (8001dec <HAL_I2C_Init+0x274>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d807      	bhi.n	8001bfc <HAL_I2C_Init+0x84>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a80      	ldr	r2, [pc, #512]	@ (8001df0 <HAL_I2C_Init+0x278>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	bf94      	ite	ls
 8001bf4:	2301      	movls	r3, #1
 8001bf6:	2300      	movhi	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e006      	b.n	8001c0a <HAL_I2C_Init+0x92>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8001df4 <HAL_I2C_Init+0x27c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bf94      	ite	ls
 8001c04:	2301      	movls	r3, #1
 8001c06:	2300      	movhi	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0e7      	b.n	8001de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4a78      	ldr	r2, [pc, #480]	@ (8001df8 <HAL_I2C_Init+0x280>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9b      	lsrs	r3, r3, #18
 8001c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a6a      	ldr	r2, [pc, #424]	@ (8001dec <HAL_I2C_Init+0x274>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d802      	bhi.n	8001c4c <HAL_I2C_Init+0xd4>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	e009      	b.n	8001c60 <HAL_I2C_Init+0xe8>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	4a69      	ldr	r2, [pc, #420]	@ (8001dfc <HAL_I2C_Init+0x284>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	3301      	adds	r3, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	495c      	ldr	r1, [pc, #368]	@ (8001dec <HAL_I2C_Init+0x274>)
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	d819      	bhi.n	8001cb4 <HAL_I2C_Init+0x13c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e59      	subs	r1, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c94:	400b      	ands	r3, r1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_I2C_Init+0x138>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e59      	subs	r1, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cae:	e051      	b.n	8001d54 <HAL_I2C_Init+0x1dc>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e04f      	b.n	8001d54 <HAL_I2C_Init+0x1dc>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d111      	bne.n	8001ce0 <HAL_I2C_Init+0x168>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	440b      	add	r3, r1
 8001cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e012      	b.n	8001d06 <HAL_I2C_Init+0x18e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1e58      	subs	r0, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	0099      	lsls	r1, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Init+0x196>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e022      	b.n	8001d54 <HAL_I2C_Init+0x1dc>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <HAL_I2C_Init+0x1bc>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e58      	subs	r0, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	440b      	add	r3, r1
 8001d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d32:	e00f      	b.n	8001d54 <HAL_I2C_Init+0x1dc>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	0099      	lsls	r1, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	6809      	ldr	r1, [r1, #0]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6911      	ldr	r1, [r2, #16]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68d2      	ldr	r2, [r2, #12]
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	000186a0 	.word	0x000186a0
 8001df0:	001e847f 	.word	0x001e847f
 8001df4:	003d08ff 	.word	0x003d08ff
 8001df8:	431bde83 	.word	0x431bde83
 8001dfc:	10624dd3 	.word	0x10624dd3

08001e00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	817b      	strh	r3, [r7, #10]
 8001e12:	460b      	mov	r3, r1
 8001e14:	813b      	strh	r3, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e1a:	f7ff fbb5 	bl	8001588 <HAL_GetTick>
 8001e1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	f040 80d9 	bne.w	8001fe0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2319      	movs	r3, #25
 8001e34:	2201      	movs	r2, #1
 8001e36:	496d      	ldr	r1, [pc, #436]	@ (8001fec <HAL_I2C_Mem_Write+0x1ec>)
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f971 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	e0cc      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Mem_Write+0x56>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0c5      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d007      	beq.n	8001e7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2221      	movs	r2, #33	@ 0x21
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff0 <HAL_I2C_Mem_Write+0x1f0>)
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ebe:	88f8      	ldrh	r0, [r7, #6]
 8001ec0:	893a      	ldrh	r2, [r7, #8]
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4603      	mov	r3, r0
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f890 	bl	8001ff4 <I2C_RequestMemoryWrite>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d052      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e081      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fa36 	bl	8002354 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d107      	bne.n	8001f06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11b      	bne.n	8001f80 <HAL_I2C_Mem_Write+0x180>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d017      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1aa      	bne.n	8001ede <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fa29 	bl	80023e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d107      	bne.n	8001fb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e016      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	00100002 	.word	0x00100002
 8001ff0:	ffff0000 	.word	0xffff0000

08001ff4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	460b      	mov	r3, r1
 8002008:	813b      	strh	r3, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800201c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	2200      	movs	r2, #0
 8002026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f878 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002044:	d103      	bne.n	800204e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e05f      	b.n	8002112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002052:	897b      	ldrh	r3, [r7, #10]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	492d      	ldr	r1, [pc, #180]	@ (800211c <I2C_RequestMemoryWrite+0x128>)
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f8d3 	bl	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e04c      	b.n	8002112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f95e 	bl	8002354 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e02b      	b.n	8002112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020c0:	893b      	ldrh	r3, [r7, #8]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	e021      	b.n	8002110 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020cc:	893b      	ldrh	r3, [r7, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020dc:	6a39      	ldr	r1, [r7, #32]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f938 	bl	8002354 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d107      	bne.n	8002102 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e005      	b.n	8002112 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002106:	893b      	ldrh	r3, [r7, #8]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	00010002 	.word	0x00010002

08002120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002130:	e048      	b.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d044      	beq.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff fa25 	bl	8001588 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d139      	bne.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	0c1b      	lsrs	r3, r3, #16
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10d      	bne.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	43da      	mvns	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	e00c      	b.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	43da      	mvns	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d116      	bne.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e023      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d10d      	bne.n	80021ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	e00c      	b.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	43da      	mvns	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	429a      	cmp	r2, r3
 8002208:	d093      	beq.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002222:	e071      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002232:	d123      	bne.n	800227c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800224c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e067      	b.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d041      	beq.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff f980 	bl	8001588 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d136      	bne.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d10c      	bne.n	80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4013      	ands	r3, r2
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e00b      	b.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	43da      	mvns	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4013      	ands	r3, r2
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e021      	b.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10c      	bne.n	800232c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	43da      	mvns	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e00b      	b.n	8002344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f af6d 	bne.w	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002360:	e034      	b.n	80023cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f886 	bl	8002474 <I2C_IsAcknowledgeFailed>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d028      	beq.n	80023cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7ff f905 	bl	8001588 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11d      	bne.n	80023cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239a:	2b80      	cmp	r3, #128	@ 0x80
 800239c:	d016      	beq.n	80023cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d6:	2b80      	cmp	r3, #128	@ 0x80
 80023d8:	d1c3      	bne.n	8002362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023f0:	e034      	b.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f83e 	bl	8002474 <I2C_IsAcknowledgeFailed>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e034      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d028      	beq.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7ff f8bd 	bl	8001588 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11d      	bne.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d016      	beq.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d1c3      	bne.n	80023f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248a:	d11b      	bne.n	80024c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e101      	b.n	80026e8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 fea4 	bl	800824c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002512:	d102      	bne.n	800251a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fa8b 	bl	8004a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7c1a      	ldrb	r2, [r3, #16]
 800252c:	f88d 2000 	strb.w	r2, [sp]
 8002530:	3304      	adds	r3, #4
 8002532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002534:	f002 f96a 	bl	800480c <USB_CoreInit>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ce      	b.n	80026e8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fa83 	bl	8004a5c <USB_SetCurrentMode>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0bf      	b.n	80026e8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e04a      	b.n	8002604 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3315      	adds	r3, #21
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3314      	adds	r3, #20
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	b298      	uxth	r0, r3
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	332e      	adds	r3, #46	@ 0x2e
 80025aa:	4602      	mov	r2, r0
 80025ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3318      	adds	r3, #24
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	331c      	adds	r3, #28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3320      	adds	r3, #32
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3324      	adds	r3, #36	@ 0x24
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3301      	adds	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	791b      	ldrb	r3, [r3, #4]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3af      	bcc.n	800256e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e044      	b.n	800269e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3301      	adds	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3b5      	bcc.n	8002614 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7c1a      	ldrb	r2, [r3, #16]
 80026b0:	f88d 2000 	strb.w	r2, [sp]
 80026b4:	3304      	adds	r3, #4
 80026b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b8:	f002 fa1c 	bl	8004af4 <USB_DevInit>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00c      	b.n	80026e8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fa66 	bl	8005bb2 <USB_DevDisconnect>

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_Start+0x1c>
 8002708:	2302      	movs	r3, #2
 800270a:	e022      	b.n	8002752 <HAL_PCD_Start+0x62>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 f96d 	bl	8004a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fa14 	bl	8005b70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b08d      	sub	sp, #52	@ 0x34
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fad2 	bl	8005d1a <USB_GetMode>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	f040 848c 	bne.w	8003096 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fa36 	bl	8005bf4 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8482 	beq.w	8003094 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fa23 	bl	8005bf4 <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d107      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 0202 	and.w	r2, r2, #2
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fa11 	bl	8005bf4 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d161      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0210 	bic.w	r2, r2, #16
 80027ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	2b02      	cmp	r3, #2
 8002816:	d124      	bne.n	8002862 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d035      	beq.n	8002890 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6a38      	ldr	r0, [r7, #32]
 8002838:	f003 f848 	bl	80058cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285a:	441a      	add	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	e016      	b.n	8002890 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	0c5b      	lsrs	r3, r3, #17
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2b06      	cmp	r3, #6
 800286c:	d110      	bne.n	8002890 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002874:	2208      	movs	r2, #8
 8002876:	4619      	mov	r1, r3
 8002878:	6a38      	ldr	r0, [r7, #32]
 800287a:	f003 f827 	bl	80058cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288a:	441a      	add	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0210 	orr.w	r2, r2, #16
 800289e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f9a5 	bl	8005bf4 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028b4:	f040 80a7 	bne.w	8002a06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 f9aa 	bl	8005c1a <USB_ReadDevAllOutEpInterrupt>
 80028c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028c8:	e099      	b.n	80029fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808e 	beq.w	80029f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f9ce 	bl	8005c82 <USB_ReadDevOutEPInterrupt>
 80028e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	2301      	movs	r3, #1
 8002902:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fea4 	bl	8003654 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002922:	461a      	mov	r2, r3
 8002924:	2308      	movs	r3, #8
 8002926:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ff7a 	bl	8003824 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002946:	461a      	mov	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d030      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b80      	cmp	r3, #128	@ 0x80
 8002960:	d109      	bne.n	8002976 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002970:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002974:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f005 fd4f 	bl	8008444 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b2:	461a      	mov	r2, r3
 80029b4:	2302      	movs	r3, #2
 80029b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ce:	461a      	mov	r2, r3
 80029d0:	2320      	movs	r3, #32
 80029d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ea:	461a      	mov	r2, r3
 80029ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af62 	bne.w	80028ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 f8f2 	bl	8005bf4 <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a1a:	f040 80db 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 f913 	bl	8005c4e <USB_ReadDevAllInEpInterrupt>
 8002a28:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a2e:	e0cd      	b.n	8002bcc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80c2 	beq.w	8002bc0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 f939 	bl	8005cbe <USB_ReadDevInEPInterrupt>
 8002a4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d057      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	2201      	movs	r2, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69f9      	ldr	r1, [r7, #28]
 8002a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a78:	4013      	ands	r3, r2
 8002a7a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d132      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3320      	adds	r3, #32
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	331c      	adds	r3, #28
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4419      	add	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4403      	add	r3, r0
 8002aca:	3320      	adds	r3, #32
 8002acc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3324      	adds	r3, #36	@ 0x24
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002af4:	461a      	mov	r2, r3
 8002af6:	2101      	movs	r1, #1
 8002af8:	f003 f940 	bl	8005d7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 fc23 	bl	800834e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2308      	movs	r3, #8
 8002b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b56:	461a      	mov	r2, r3
 8002b58:	2340      	movs	r3, #64	@ 0x40
 8002b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d023      	beq.n	8002bae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b68:	6a38      	ldr	r0, [r7, #32]
 8002b6a:	f002 f927 	bl	8004dbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3310      	adds	r3, #16
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d108      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f005 fc66 	bl	8008468 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2302      	movs	r3, #2
 8002bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fcbd 	bl	800353a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f af2e 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f80b 	bl	8005bf4 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002be8:	d122      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d108      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c10:	2100      	movs	r1, #0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fea4 	bl	8003960 <HAL_PCDEx_LPM_Callback>
 8002c18:	e002      	b.n	8002c20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fc04 	bl	8008428 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 ffdd 	bl	8005bf4 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c44:	d112      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f005 fbc0 	bl	80083dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c6a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 ffbf 	bl	8005bf4 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c80:	f040 80b7 	bne.w	8002df2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2110      	movs	r1, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 f88c 	bl	8004dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca8:	e046      	b.n	8002d38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002cd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cea:	461a      	mov	r2, r3
 8002cec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cf0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d02:	0151      	lsls	r1, r2, #5
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	440a      	add	r2, r1
 8002d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d22:	0151      	lsls	r1, r2, #5
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	440a      	add	r2, r1
 8002d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d34:	3301      	adds	r3, #1
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d3b2      	bcc.n	8002caa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d52:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7bdb      	ldrb	r3, [r3, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d016      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f043 030b 	orr.w	r3, r3, #11
 8002d74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d86:	f043 030b 	orr.w	r3, r3, #11
 8002d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8c:	e015      	b.n	8002dba <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002da0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002da4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db4:	f043 030b 	orr.w	r3, r3, #11
 8002db8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002dcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f002 ffcd 	bl	8005d7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fefc 	bl	8005bf4 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e06:	d123      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 ff92 	bl	8005d36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 f849 	bl	8004eae <USB_GetDevSpeed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681c      	ldr	r4, [r3, #0]
 8002e28:	f001 f9ca 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e32:	461a      	mov	r2, r3
 8002e34:	4620      	mov	r0, r4
 8002e36:	f001 fd4d 	bl	80048d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f005 faaf 	bl	800839e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fecd 	bl	8005bf4 <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d10a      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f005 fa8c 	bl	8008382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f002 0208 	and.w	r2, r2, #8
 8002e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 feb8 	bl	8005bf4 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b80      	cmp	r3, #128	@ 0x80
 8002e8c:	d123      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9e:	e014      	b.n	8002eca <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb0a 	bl	80034d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d3e4      	bcc.n	8002ea0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fe8a 	bl	8005bf4 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eea:	d13c      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef0:	e02b      	b.n	8002f4a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3318      	adds	r3, #24
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d115      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da12      	bge.n	8002f44 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3317      	adds	r3, #23
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 faca 	bl	80034d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	3301      	adds	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d3cd      	bcc.n	8002ef2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fe42 	bl	8005bf4 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7a:	d156      	bne.n	800302a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f80:	e045      	b.n	800300e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d12e      	bne.n	8003008 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002faa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da2b      	bge.n	8003008 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fbc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d121      	bne.n	8003008 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003000:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003004:	6053      	str	r3, [r2, #4]
            break;
 8003006:	e008      	b.n	800301a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	3301      	adds	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	791b      	ldrb	r3, [r3, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	4293      	cmp	r3, r2
 8003018:	d3b3      	bcc.n	8002f82 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fde0 	bl	8005bf4 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303e:	d10a      	bne.n	8003056 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f005 fa23 	bl	800848c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f002 fdca 	bl	8005bf4 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d115      	bne.n	8003096 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f005 fa13 	bl	80084a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	e000      	b.n	8003096 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003094:	bf00      	nop
    }
  }
}
 8003096:	3734      	adds	r7, #52	@ 0x34
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_SetAddress+0x1a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e012      	b.n	80030dc <HAL_PCD_SetAddress+0x40>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fd29 	bl	8005b24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	70fb      	strb	r3, [r7, #3]
 80030f6:	460b      	mov	r3, r1
 80030f8:	803b      	strh	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	da0f      	bge.n	800312a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3310      	adds	r3, #16
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	705a      	strb	r2, [r3, #1]
 8003128:	e00f      	b.n	800314a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003156:	883b      	ldrh	r3, [r7, #0]
 8003158:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	78ba      	ldrb	r2, [r7, #2]
 8003164:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d102      	bne.n	8003184 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_PCD_EP_Open+0xae>
 800318e:	2302      	movs	r3, #2
 8003190:	e00e      	b.n	80031b0 <HAL_PCD_EP_Open+0xcc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fea9 	bl	8004ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031ae:	7afb      	ldrb	r3, [r7, #11]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da0f      	bge.n	80031ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	3310      	adds	r3, #16
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	705a      	strb	r2, [r3, #1]
 80031ea:	e00f      	b.n	800320c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_PCD_EP_Close+0x6e>
 8003222:	2302      	movs	r3, #2
 8003224:	e00e      	b.n	8003244 <HAL_PCD_EP_Close+0x8c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fee7 	bl	8005008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	460b      	mov	r3, r1
 800325a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	f003 020f 	and.w	r2, r3, #15
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	799b      	ldrb	r3, [r3, #6]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	799b      	ldrb	r3, [r3, #6]
 80032b0:	461a      	mov	r2, r3
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	f001 ff84 	bl	80051c0 <USB_EPStartXfer>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032e4:	681b      	ldr	r3, [r3, #0]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	460b      	mov	r3, r1
 8003300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3310      	adds	r3, #16
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2201      	movs	r2, #1
 8003330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	799b      	ldrb	r3, [r3, #6]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	461a      	mov	r2, r3
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	f001 ff32 	bl	80051c0 <USB_EPStartXfer>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	7912      	ldrb	r2, [r2, #4]
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e04f      	b.n	8003424 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003388:	2b00      	cmp	r3, #0
 800338a:	da0f      	bge.n	80033ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 020f 	and.w	r2, r3, #15
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3310      	adds	r3, #16
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	3304      	adds	r3, #4
 80033a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	705a      	strb	r2, [r3, #1]
 80033aa:	e00d      	b.n	80033c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_PCD_EP_SetStall+0x82>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e01d      	b.n	8003424 <HAL_PCD_EP_SetStall+0xbe>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 fac0 	bl	800597c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7999      	ldrb	r1, [r3, #6]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003414:	461a      	mov	r2, r3
 8003416:	f002 fcb1 	bl	8005d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	7912      	ldrb	r2, [r2, #4]
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e042      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800344a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	da0f      	bge.n	8003472 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3310      	adds	r3, #16
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	705a      	strb	r2, [r3, #1]
 8003470:	e00f      	b.n	8003492 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_EP_ClrStall+0x86>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e00e      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0xa4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fac9 	bl	8005a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da0c      	bge.n	8003506 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 020f 	and.w	r2, r3, #15
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3310      	adds	r3, #16
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	3304      	adds	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e00c      	b.n	8003520 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	f002 f8e8 	bl	80056fc <USB_EPStopXfer>
 800352c:	4603      	mov	r3, r0
 800352e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003530:	7afb      	ldrb	r3, [r7, #11]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b08a      	sub	sp, #40	@ 0x28
 800353e:	af02      	add	r7, sp, #8
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3310      	adds	r3, #16
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d901      	bls.n	8003572 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06b      	b.n	800364a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d902      	bls.n	800358e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3303      	adds	r3, #3
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003596:	e02a      	b.n	80035ee <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d902      	bls.n	80035b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3303      	adds	r3, #3
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4603      	mov	r3, r0
 80035d0:	6978      	ldr	r0, [r7, #20]
 80035d2:	f002 f93d 	bl	8005850 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	441a      	add	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	d809      	bhi.n	8003618 <PCD_WriteEmptyTxFifo+0xde>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800360c:	429a      	cmp	r2, r3
 800360e:	d203      	bcs.n	8003618 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1bf      	bne.n	8003598 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	d811      	bhi.n	8003648 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	2201      	movs	r2, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	43db      	mvns	r3, r3
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003644:	4013      	ands	r3, r2
 8003646:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	333c      	adds	r3, #60	@ 0x3c
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	799b      	ldrb	r3, [r3, #6]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d17b      	bne.n	8003782 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4a61      	ldr	r2, [pc, #388]	@ (800381c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	f240 80b9 	bls.w	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80b3 	beq.w	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b6:	461a      	mov	r2, r3
 80036b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036bc:	6093      	str	r3, [r2, #8]
 80036be:	e0a7      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	2320      	movs	r3, #32
 80036da:	6093      	str	r3, [r2, #8]
 80036dc:	e098      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8093 	bne.w	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	@ (800381c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d90f      	bls.n	8003712 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	e07e      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	440b      	add	r3, r1
 8003734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d114      	bne.n	8003774 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800375c:	461a      	mov	r2, r3
 800375e:	2101      	movs	r1, #1
 8003760:	f002 fb0c 	bl	8005d7c <USB_EP0_OutStart>
 8003764:	e006      	b.n	8003774 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f004 fdcc 	bl	8008318 <HAL_PCD_DataOutStageCallback>
 8003780:	e046      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d124      	bne.n	80037d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a6:	6093      	str	r3, [r2, #8]
 80037a8:	e032      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c0:	461a      	mov	r2, r3
 80037c2:	2320      	movs	r3, #32
 80037c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f004 fda3 	bl	8008318 <HAL_PCD_DataOutStageCallback>
 80037d2:	e01d      	b.n	8003810 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d114      	bne.n	8003804 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037fc:	461a      	mov	r2, r3
 80037fe:	2100      	movs	r1, #0
 8003800:	f002 fabc 	bl	8005d7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f004 fd84 	bl	8008318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	4f54300a 	.word	0x4f54300a
 8003820:	4f54310a 	.word	0x4f54310a

08003824 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	333c      	adds	r3, #60	@ 0x3c
 800383c:	3304      	adds	r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d90e      	bls.n	8003878 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003876:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fd3b 	bl	80082f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d90c      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	799b      	ldrb	r3, [r3, #6]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003898:	461a      	mov	r2, r3
 800389a:	2101      	movs	r1, #1
 800389c:	f002 fa6e 	bl	8005d7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	4f54300a 	.word	0x4f54300a

080038b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
 80038bc:	4613      	mov	r3, r2
 80038be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ce:	883b      	ldrh	r3, [r7, #0]
 80038d0:	0419      	lsls	r1, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	430a      	orrs	r2, r1
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28
 80038dc:	e028      	b.n	8003930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e00d      	b.n	800390e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3340      	adds	r3, #64	@ 0x40
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	3301      	adds	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	3b01      	subs	r3, #1
 8003914:	429a      	cmp	r2, r3
 8003916:	d3ec      	bcc.n	80038f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003918:	883b      	ldrh	r3, [r7, #0]
 800391a:	0418      	lsls	r0, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	3b01      	subs	r3, #1
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4302      	orrs	r2, r0
 8003928:	3340      	adds	r3, #64	@ 0x40
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e267      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003996:	4b88      	ldr	r3, [pc, #544]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00c      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b85      	ldr	r3, [pc, #532]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b82      	ldr	r3, [pc, #520]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e242      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b76      	ldr	r3, [pc, #472]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a75      	ldr	r2, [pc, #468]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b70      	ldr	r3, [pc, #448]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6f      	ldr	r2, [pc, #444]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6c      	ldr	r2, [pc, #432]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b69      	ldr	r3, [pc, #420]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a68      	ldr	r2, [pc, #416]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b66      	ldr	r3, [pc, #408]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a65      	ldr	r2, [pc, #404]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fdaa 	bl	8001588 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fda6 	bl	8001588 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	@ 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e207      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fd96 	bl	8001588 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fd92 	bl	8001588 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1f3      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	4b51      	ldr	r3, [pc, #324]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b47      	ldr	r3, [pc, #284]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b44      	ldr	r3, [pc, #272]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1c7      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4937      	ldr	r1, [pc, #220]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	e03a      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae8:	4b34      	ldr	r3, [pc, #208]	@ (8003bbc <HAL_RCC_OscConfig+0x244>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd fd4b 	bl	8001588 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fd fd47 	bl	8001588 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1a8      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4925      	ldr	r1, [pc, #148]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <HAL_RCC_OscConfig+0x244>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fd2a 	bl	8001588 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fd fd26 	bl	8001588 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e187      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d036      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <HAL_RCC_OscConfig+0x248>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd fd0a 	bl	8001588 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fd fd06 	bl	8001588 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e167      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
 8003b96:	e01b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b98:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_RCC_OscConfig+0x248>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fcf3 	bl	8001588 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	e00e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fcef 	bl	8001588 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d907      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e150      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	42470000 	.word	0x42470000
 8003bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b88      	ldr	r3, [pc, #544]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ea      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8097 	beq.w	8003d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be2:	4b81      	ldr	r3, [pc, #516]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b77      	ldr	r3, [pc, #476]	@ (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1a:	4b74      	ldr	r3, [pc, #464]	@ (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a73      	ldr	r2, [pc, #460]	@ (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fd fcaf 	bl	8001588 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fcab 	bl	8001588 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e10c      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b6a      	ldr	r3, [pc, #424]	@ (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2ea>
 8003c54:	4b64      	ldr	r3, [pc, #400]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a63      	ldr	r2, [pc, #396]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	e01c      	b.n	8003c9c <HAL_RCC_OscConfig+0x324>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x30c>
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	4b5c      	ldr	r3, [pc, #368]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0x324>
 8003c84:	4b58      	ldr	r3, [pc, #352]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4a57      	ldr	r2, [pc, #348]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c90:	4b55      	ldr	r3, [pc, #340]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a54      	ldr	r2, [pc, #336]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 0304 	bic.w	r3, r3, #4
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fc70 	bl	8001588 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd fc6c 	bl	8001588 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0cb      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	4b49      	ldr	r3, [pc, #292]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ee      	beq.n	8003cac <HAL_RCC_OscConfig+0x334>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fc5a 	bl	8001588 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fc56 	bl	8001588 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0b5      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cee:	4b3e      	ldr	r3, [pc, #248]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ee      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b39      	ldr	r3, [pc, #228]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	4a38      	ldr	r2, [pc, #224]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80a1 	beq.w	8003e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d16:	4b34      	ldr	r3, [pc, #208]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d05c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d141      	bne.n	8003dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fd fc2a 	bl	8001588 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fd fc26 	bl	8001588 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e087      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	041b      	lsls	r3, r3, #16
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	491b      	ldr	r1, [pc, #108]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fd fbff 	bl	8001588 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd fbfb 	bl	8001588 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e05c      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da0:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x416>
 8003dac:	e054      	b.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b10      	ldr	r3, [pc, #64]	@ (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd fbe8 	bl	8001588 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fd fbe4 	bl	8001588 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e045      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x444>
 8003dda:	e03d      	b.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e038      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d028      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d121      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d11a      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fb16 	bl	8001588 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd fb12 	bl	8001588 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	@ (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	@ (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fa76 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	08009f98 	.word	0x08009f98
 800402c:	20000008 	.word	0x20000008
 8004030:	2000000c 	.word	0x2000000c

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b090      	sub	sp, #64	@ 0x40
 800403a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404c:	4b59      	ldr	r3, [pc, #356]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00d      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x40>
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 80a1 	bhi.w	80041a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x34>
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x3a>
 8004066:	e09b      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b53      	ldr	r3, [pc, #332]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800406c:	e09b      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406e:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004072:	e098      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004074:	4b4f      	ldr	r3, [pc, #316]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407e:	4b4d      	ldr	r3, [pc, #308]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d028      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b4a      	ldr	r3, [pc, #296]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	2200      	movs	r2, #0
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	627a      	str	r2, [r7, #36]	@ 0x24
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800409c:	2100      	movs	r1, #0
 800409e:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 80040a0:	fb03 f201 	mul.w	r2, r3, r1
 80040a4:	2300      	movs	r3, #0
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	4a43      	ldr	r2, [pc, #268]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 80040ae:	fba0 1202 	umull	r1, r2, r0, r2
 80040b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b4:	460a      	mov	r2, r1
 80040b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ba:	4413      	add	r3, r2
 80040bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	2200      	movs	r2, #0
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	61fa      	str	r2, [r7, #28]
 80040c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040ce:	f7fc f8df 	bl	8000290 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4613      	mov	r3, r2
 80040d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040da:	e053      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	2200      	movs	r2, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	617a      	str	r2, [r7, #20]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ee:	f04f 0b00 	mov.w	fp, #0
 80040f2:	4652      	mov	r2, sl
 80040f4:	465b      	mov	r3, fp
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004104:	0150      	lsls	r0, r2, #5
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	ebb2 080a 	subs.w	r8, r2, sl
 800410e:	eb63 090b 	sbc.w	r9, r3, fp
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800411e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004122:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004126:	ebb2 0408 	subs.w	r4, r2, r8
 800412a:	eb63 0509 	sbc.w	r5, r3, r9
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	00eb      	lsls	r3, r5, #3
 8004138:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413c:	00e2      	lsls	r2, r4, #3
 800413e:	4614      	mov	r4, r2
 8004140:	461d      	mov	r5, r3
 8004142:	eb14 030a 	adds.w	r3, r4, sl
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	eb45 030b 	adc.w	r3, r5, fp
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415a:	4629      	mov	r1, r5
 800415c:	028b      	lsls	r3, r1, #10
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004164:	4621      	mov	r1, r4
 8004166:	028a      	lsls	r2, r1, #10
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	2200      	movs	r2, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	f7fc f88a 	bl	8000290 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3740      	adds	r7, #64	@ 0x40
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	017d7840 	.word	0x017d7840

080041c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000008 	.word	0x20000008

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041dc:	f7ff fff0 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0a9b      	lsrs	r3, r3, #10
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	@ (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08009fa8 	.word	0x08009fa8

08004200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e041      	b.n	8004296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd f82a 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 f950 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e03c      	b.n	8004332 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <HAL_TIM_Base_Start+0xa0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <HAL_TIM_Base_Start+0xa4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_TIM_Base_Start+0xa8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	@ (800434c <HAL_TIM_Base_Start+0xac>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <HAL_TIM_Base_Start+0xb0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d111      	bne.n	8004320 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d010      	beq.n	8004330 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e007      	b.n	8004330 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000

08004354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x1c>
 800436c:	2302      	movs	r3, #2
 800436e:	e0b4      	b.n	80044da <HAL_TIM_ConfigClockSource+0x186>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a8:	d03e      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xd4>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ae:	f200 8087 	bhi.w	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b6:	f000 8086 	beq.w	80044c6 <HAL_TIM_ConfigClockSource+0x172>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d87f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b70      	cmp	r3, #112	@ 0x70
 80043c2:	d01a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xa6>
 80043c4:	2b70      	cmp	r3, #112	@ 0x70
 80043c6:	d87b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b60      	cmp	r3, #96	@ 0x60
 80043ca:	d050      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x11a>
 80043cc:	2b60      	cmp	r3, #96	@ 0x60
 80043ce:	d877      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b50      	cmp	r3, #80	@ 0x50
 80043d2:	d03c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xfa>
 80043d4:	2b50      	cmp	r3, #80	@ 0x50
 80043d6:	d873      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d058      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x13a>
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d86f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b30      	cmp	r3, #48	@ 0x30
 80043e2:	d064      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b30      	cmp	r3, #48	@ 0x30
 80043e6:	d86b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d060      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d867      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d05a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	e062      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	f000 f971 	bl	80046f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800441c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e04f      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	f000 f95a 	bl	80046f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800444a:	609a      	str	r2, [r3, #8]
      break;
 800444c:	e03c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f8ce 	bl	80045fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2150      	movs	r1, #80	@ 0x50
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f927 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 800446c:	e02c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f8ed 	bl	800465a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2160      	movs	r1, #96	@ 0x60
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f917 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 800448c:	e01c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f8ae 	bl	80045fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2140      	movs	r1, #64	@ 0x40
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f907 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044ac:	e00c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 f8fe 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044be:	e003      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a37      	ldr	r2, [pc, #220]	@ (80045e4 <TIM_Base_SetConfig+0x100>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a36      	ldr	r2, [pc, #216]	@ (80045e8 <TIM_Base_SetConfig+0x104>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a35      	ldr	r2, [pc, #212]	@ (80045ec <TIM_Base_SetConfig+0x108>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2b      	ldr	r2, [pc, #172]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d017      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	@ (80045e4 <TIM_Base_SetConfig+0x100>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <TIM_Base_SetConfig+0x104>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <TIM_Base_SetConfig+0x108>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <TIM_Base_SetConfig+0x10c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <TIM_Base_SetConfig+0x110>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <TIM_Base_SetConfig+0x114>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0e      	ldr	r2, [pc, #56]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]
  }
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 030a 	bic.w	r3, r3, #10
 8004638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465a:	b480      	push	{r7}
 800465c:	b087      	sub	sp, #28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 0210 	bic.w	r2, r3, #16
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f043 0307 	orr.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800470a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	431a      	orrs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e050      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d013      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000

0800480c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800480c:	b084      	sub	sp, #16
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	f107 001c 	add.w	r0, r7, #28
 800481a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800481e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004822:	2b01      	cmp	r3, #1
 8004824:	d123      	bne.n	800486e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800483a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800484e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 fae8 	bl	8005e38 <USB_CoreReset>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e01b      	b.n	80048a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 fadc 	bl	8005e38 <USB_CoreReset>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004884:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	@ 0x38
 8004898:	e005      	b.n	80048a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048a6:	7fbb      	ldrb	r3, [r7, #30]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10b      	bne.n	80048c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f043 0206 	orr.w	r2, r3, #6
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d0:	b004      	add	sp, #16
 80048d2:	4770      	bx	lr

080048d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d165      	bne.n	80049b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a41      	ldr	r2, [pc, #260]	@ (80049f0 <USB_SetTurnaroundTime+0x11c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d906      	bls.n	80048fe <USB_SetTurnaroundTime+0x2a>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a40      	ldr	r2, [pc, #256]	@ (80049f4 <USB_SetTurnaroundTime+0x120>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d202      	bcs.n	80048fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048f8:	230f      	movs	r3, #15
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e062      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4a3c      	ldr	r2, [pc, #240]	@ (80049f4 <USB_SetTurnaroundTime+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d306      	bcc.n	8004914 <USB_SetTurnaroundTime+0x40>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a3b      	ldr	r2, [pc, #236]	@ (80049f8 <USB_SetTurnaroundTime+0x124>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d202      	bcs.n	8004914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800490e:	230e      	movs	r3, #14
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e057      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4a38      	ldr	r2, [pc, #224]	@ (80049f8 <USB_SetTurnaroundTime+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d306      	bcc.n	800492a <USB_SetTurnaroundTime+0x56>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4a37      	ldr	r2, [pc, #220]	@ (80049fc <USB_SetTurnaroundTime+0x128>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d202      	bcs.n	800492a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004924:	230d      	movs	r3, #13
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e04c      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4a33      	ldr	r2, [pc, #204]	@ (80049fc <USB_SetTurnaroundTime+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d306      	bcc.n	8004940 <USB_SetTurnaroundTime+0x6c>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a32      	ldr	r2, [pc, #200]	@ (8004a00 <USB_SetTurnaroundTime+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d802      	bhi.n	8004940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800493a:	230c      	movs	r3, #12
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e041      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <USB_SetTurnaroundTime+0x12c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d906      	bls.n	8004956 <USB_SetTurnaroundTime+0x82>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a04 <USB_SetTurnaroundTime+0x130>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d802      	bhi.n	8004956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004950:	230b      	movs	r3, #11
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e036      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a2a      	ldr	r2, [pc, #168]	@ (8004a04 <USB_SetTurnaroundTime+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d906      	bls.n	800496c <USB_SetTurnaroundTime+0x98>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4a29      	ldr	r2, [pc, #164]	@ (8004a08 <USB_SetTurnaroundTime+0x134>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d802      	bhi.n	800496c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004966:	230a      	movs	r3, #10
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e02b      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <USB_SetTurnaroundTime+0x134>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d906      	bls.n	8004982 <USB_SetTurnaroundTime+0xae>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4a25      	ldr	r2, [pc, #148]	@ (8004a0c <USB_SetTurnaroundTime+0x138>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d202      	bcs.n	8004982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800497c:	2309      	movs	r3, #9
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e020      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4a21      	ldr	r2, [pc, #132]	@ (8004a0c <USB_SetTurnaroundTime+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d306      	bcc.n	8004998 <USB_SetTurnaroundTime+0xc4>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <USB_SetTurnaroundTime+0x13c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d802      	bhi.n	8004998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004992:	2308      	movs	r3, #8
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e015      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <USB_SetTurnaroundTime+0x13c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d906      	bls.n	80049ae <USB_SetTurnaroundTime+0xda>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <USB_SetTurnaroundTime+0x140>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d202      	bcs.n	80049ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049a8:	2307      	movs	r3, #7
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e00a      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049ae:	2306      	movs	r3, #6
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e007      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049ba:	2309      	movs	r3, #9
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e001      	b.n	80049c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049c0:	2309      	movs	r3, #9
 80049c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	029b      	lsls	r3, r3, #10
 80049d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	00d8acbf 	.word	0x00d8acbf
 80049f4:	00e4e1c0 	.word	0x00e4e1c0
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	01067380 	.word	0x01067380
 8004a00:	011a499f 	.word	0x011a499f
 8004a04:	01312cff 	.word	0x01312cff
 8004a08:	014ca43f 	.word	0x014ca43f
 8004a0c:	016e3600 	.word	0x016e3600
 8004a10:	01a6ab1f 	.word	0x01a6ab1f
 8004a14:	01e84800 	.word	0x01e84800

08004a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f043 0201 	orr.w	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0201 	bic.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d115      	bne.n	8004aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a8a:	200a      	movs	r0, #10
 8004a8c:	f7fc fd88 	bl	80015a0 <HAL_Delay>
      ms += 10U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	330a      	adds	r3, #10
 8004a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 f93f 	bl	8005d1a <USB_GetMode>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d01e      	beq.n	8004ae0 <USB_SetCurrentMode+0x84>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004aa6:	d9f0      	bls.n	8004a8a <USB_SetCurrentMode+0x2e>
 8004aa8:	e01a      	b.n	8004ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d115      	bne.n	8004adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004abc:	200a      	movs	r0, #10
 8004abe:	f7fc fd6f 	bl	80015a0 <HAL_Delay>
      ms += 10U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	330a      	adds	r3, #10
 8004ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 f926 	bl	8005d1a <USB_GetMode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <USB_SetCurrentMode+0x84>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ad8:	d9f0      	bls.n	8004abc <USB_SetCurrentMode+0x60>
 8004ada:	e001      	b.n	8004ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e005      	b.n	8004aec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ae4:	d101      	bne.n	8004aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af4:	b084      	sub	sp, #16
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e009      	b.n	8004b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3340      	adds	r3, #64	@ 0x40
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3301      	adds	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b0e      	cmp	r3, #14
 8004b2c:	d9f2      	bls.n	8004b14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11c      	bne.n	8004b70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b44:	f043 0302 	orr.w	r3, r3, #2
 8004b48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b6e:	e00b      	b.n	8004b88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10d      	bne.n	8004bb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f968 	bl	8004e7c <USB_SetDevSpeed>
 8004bac:	e008      	b.n	8004bc0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bae:	2101      	movs	r1, #1
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f963 	bl	8004e7c <USB_SetDevSpeed>
 8004bb6:	e003      	b.n	8004bc0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bb8:	2103      	movs	r1, #3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f95e 	bl	8004e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8fa 	bl	8004dbc <USB_FlushTxFifo>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f924 	bl	8004e20 <USB_FlushRxFifo>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be8:	461a      	mov	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	e043      	b.n	8004c94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c22:	d118      	bne.n	8004c56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e013      	b.n	8004c68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e008      	b.n	8004c68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3301      	adds	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c98:	461a      	mov	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d3b5      	bcc.n	8004c0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e043      	b.n	8004d2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cbc:	d118      	bne.n	8004cf0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e013      	b.n	8004d02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e008      	b.n	8004d02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d32:	461a      	mov	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d3b5      	bcc.n	8004ca6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f043 0210 	orr.w	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699a      	ldr	r2, [r3, #24]
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <USB_DevInit+0x2c4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f043 0208 	orr.w	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db4:	b004      	add	sp, #16
 8004db6:	4770      	bx	lr
 8004db8:	803c3800 	.word	0x803c3800

08004dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dd6:	d901      	bls.n	8004ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e01b      	b.n	8004e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	daf2      	bge.n	8004dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	019b      	lsls	r3, r3, #6
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e00:	d901      	bls.n	8004e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e006      	b.n	8004e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d0f0      	beq.n	8004df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e38:	d901      	bls.n	8004e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e018      	b.n	8004e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	daf2      	bge.n	8004e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e5c:	d901      	bls.n	8004e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e006      	b.n	8004e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d0f0      	beq.n	8004e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b087      	sub	sp, #28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0306 	and.w	r3, r3, #6
 8004ec6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
 8004ed2:	e00a      	b.n	8004eea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d002      	beq.n	8004ee0 <USB_GetDevSpeed+0x32>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d102      	bne.n	8004ee6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	75fb      	strb	r3, [r7, #23]
 8004ee4:	e001      	b.n	8004eea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ee6:	230f      	movs	r3, #15
 8004ee8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d13a      	bne.n	8004f8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d155      	bne.n	8004ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	791b      	ldrb	r3, [r3, #4]
 8004f66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	059b      	lsls	r3, r3, #22
 8004f6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f70:	4313      	orrs	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e036      	b.n	8004ff8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11a      	bne.n	8004ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ff6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d161      	bne.n	80050e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800503a:	d11f      	bne.n	800507c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005056:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800505a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005076:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	b29b      	uxth	r3, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800509c:	4013      	ands	r3, r2
 800509e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c0:	4013      	ands	r3, r2
 80050c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	0159      	lsls	r1, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	440b      	add	r3, r1
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	4619      	mov	r1, r3
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <USB_DeactivateEndpoint+0x1b0>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
 80050e6:	e060      	b.n	80051aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050fe:	d11f      	bne.n	8005140 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800511a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800511e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800513a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800513e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	43db      	mvns	r3, r3
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005160:	4013      	ands	r3, r2
 8005162:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	43db      	mvns	r3, r3
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005184:	4013      	ands	r3, r2
 8005186:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	440b      	add	r3, r1
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	4619      	mov	r1, r3
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <USB_DeactivateEndpoint+0x1b4>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	ec337800 	.word	0xec337800
 80051bc:	eff37800 	.word	0xeff37800

080051c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 817f 	bne.w	80054e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d132      	bne.n	8005250 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005204:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005208:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800520c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005228:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800522c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005248:	0cdb      	lsrs	r3, r3, #19
 800524a:	04db      	lsls	r3, r3, #19
 800524c:	6113      	str	r3, [r2, #16]
 800524e:	e097      	b.n	8005380 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800526a:	0cdb      	lsrs	r3, r3, #19
 800526c:	04db      	lsls	r3, r3, #19
 800526e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800528a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800528e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005292:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11a      	bne.n	80052d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d903      	bls.n	80052ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052cc:	6113      	str	r3, [r2, #16]
 80052ce:	e044      	b.n	800535a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4413      	add	r3, r2
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	04d9      	lsls	r1, r3, #19
 80052f8:	4ba4      	ldr	r3, [pc, #656]	@ (800558c <USB_EPStartXfer+0x3cc>)
 80052fa:	400b      	ands	r3, r1
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	0148      	lsls	r0, r1, #5
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	4401      	add	r1, r0
 8005304:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005308:	4313      	orrs	r3, r2
 800530a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	791b      	ldrb	r3, [r3, #4]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d122      	bne.n	800535a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005332:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	075b      	lsls	r3, r3, #29
 8005346:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800534a:	69b9      	ldr	r1, [r7, #24]
 800534c:	0148      	lsls	r0, r1, #5
 800534e:	69f9      	ldr	r1, [r7, #28]
 8005350:	4401      	add	r1, r0
 8005352:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005356:	4313      	orrs	r3, r2
 8005358:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	0148      	lsls	r0, r1, #5
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	4401      	add	r1, r0
 8005378:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d14b      	bne.n	800541e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539a:	461a      	mov	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	791b      	ldrb	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d128      	bne.n	80053fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d110      	bne.n	80053dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e00f      	b.n	80053fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005416:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e166      	b.n	80056ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005438:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800543c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	791b      	ldrb	r3, [r3, #4]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d015      	beq.n	8005472 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 814e 	beq.w	80056ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800546c:	4313      	orrs	r3, r2
 800546e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005470:	e13c      	b.n	80056ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d110      	bne.n	80054a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e00f      	b.n	80054c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68d9      	ldr	r1, [r3, #12]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	b298      	uxth	r0, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4603      	mov	r3, r0
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f9b9 	bl	8005850 <USB_WritePacket>
 80054de:	e105      	b.n	80056ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054fa:	0cdb      	lsrs	r3, r3, #19
 80054fc:	04db      	lsls	r3, r3, #19
 80054fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800551e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005522:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d132      	bne.n	8005590 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	0148      	lsls	r0, r1, #5
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	4401      	add	r1, r0
 8005560:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005586:	6113      	str	r3, [r2, #16]
 8005588:	e062      	b.n	8005650 <USB_EPStartXfer+0x490>
 800558a:	bf00      	nop
 800558c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d123      	bne.n	80055e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	69b9      	ldr	r1, [r7, #24]
 80055b0:	0148      	lsls	r0, r1, #5
 80055b2:	69f9      	ldr	r1, [r7, #28]
 80055b4:	4401      	add	r1, r0
 80055b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055dc:	6113      	str	r3, [r2, #16]
 80055de:	e037      	b.n	8005650 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	8afa      	ldrh	r2, [r7, #22]
 80055fc:	fb03 f202 	mul.w	r2, r3, r2
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	04d9      	lsls	r1, r3, #19
 8005616:	4b38      	ldr	r3, [pc, #224]	@ (80056f8 <USB_EPStartXfer+0x538>)
 8005618:	400b      	ands	r3, r1
 800561a:	69b9      	ldr	r1, [r7, #24]
 800561c:	0148      	lsls	r0, r1, #5
 800561e:	69f9      	ldr	r1, [r7, #28]
 8005620:	4401      	add	r1, r0
 8005622:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005626:	4313      	orrs	r3, r2
 8005628:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	0148      	lsls	r0, r1, #5
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	4401      	add	r1, r0
 8005648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800564c:	4313      	orrs	r3, r2
 800564e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d10d      	bne.n	8005672 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566e:	460a      	mov	r2, r1
 8005670:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	791b      	ldrb	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d128      	bne.n	80056cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d110      	bne.n	80056ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e00f      	b.n	80056cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	1ff80000 	.word	0x1ff80000

080056fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d14a      	bne.n	80057b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005732:	f040 8086 	bne.w	8005842 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005754:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005758:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800577c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f242 7210 	movw	r2, #10000	@ 0x2710
 800578a:	4293      	cmp	r3, r2
 800578c:	d902      	bls.n	8005794 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
          break;
 8005792:	e056      	b.n	8005842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ac:	d0e7      	beq.n	800577e <USB_EPStopXfer+0x82>
 80057ae:	e048      	b.n	8005842 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c8:	d13b      	bne.n	8005842 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005810:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800581e:	4293      	cmp	r3, r2
 8005820:	d902      	bls.n	8005828 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
          break;
 8005826:	e00c      	b.n	8005842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005840:	d0e7      	beq.n	8005812 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
}
 8005844:	4618      	mov	r0, r3
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	@ 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	460b      	mov	r3, r1
 8005860:	71fb      	strb	r3, [r7, #7]
 8005862:	4613      	mov	r3, r2
 8005864:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800586e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d123      	bne.n	80058be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005876:	88bb      	ldrh	r3, [r7, #4]
 8005878:	3303      	adds	r3, #3
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e018      	b.n	80058b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	031a      	lsls	r2, r3, #12
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005890:	461a      	mov	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	3301      	adds	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3301      	adds	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3e2      	bcc.n	8005884 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3724      	adds	r7, #36	@ 0x24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b08b      	sub	sp, #44	@ 0x2c
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e014      	b.n	8005922 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	601a      	str	r2, [r3, #0]
    pDest++;
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	3301      	adds	r3, #1
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	3301      	adds	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	3301      	adds	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	3301      	adds	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	3301      	adds	r3, #1
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	429a      	cmp	r2, r3
 8005928:	d3e6      	bcc.n	80058f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800592a:	8bfb      	ldrh	r3, [r7, #30]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593a:	461a      	mov	r2, r3
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	701a      	strb	r2, [r3, #0]
      i++;
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	3301      	adds	r3, #1
 800595a:	623b      	str	r3, [r7, #32]
      pDest++;
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	3301      	adds	r3, #1
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005962:	8bfb      	ldrh	r3, [r7, #30]
 8005964:	3b01      	subs	r3, #1
 8005966:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005968:	8bfb      	ldrh	r3, [r7, #30]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ea      	bne.n	8005944 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005970:	4618      	mov	r0, r3
 8005972:	372c      	adds	r7, #44	@ 0x2c
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d12c      	bne.n	80059f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	db12      	blt.n	80059d0 <USB_EPSetStall+0x54>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00f      	beq.n	80059d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e02b      	b.n	8005a4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db12      	blt.n	8005a2a <USB_EPSetStall+0xae>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00f      	beq.n	8005a2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d128      	bne.n	8005ac6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	791b      	ldrb	r3, [r3, #4]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d003      	beq.n	8005aa4 <USB_EPClearStall+0x4c>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d138      	bne.n	8005b16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	e027      	b.n	8005b16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ae4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	791b      	ldrb	r3, [r3, #4]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d003      	beq.n	8005af6 <USB_EPClearStall+0x9e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	791b      	ldrb	r3, [r3, #4]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d10f      	bne.n	8005b16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b9e:	f023 0302 	bic.w	r3, r3, #2
 8005ba2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005bcc:	f023 0303 	bic.w	r3, r3, #3
 8005bd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0c1b      	lsrs	r3, r3, #16
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	b29b      	uxth	r3, r3
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4013      	ands	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b087      	sub	sp, #28
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	01db      	lsls	r3, r3, #7
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0301 	and.w	r3, r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	460b      	mov	r3, r1
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	333c      	adds	r3, #60	@ 0x3c
 8005d92:	3304      	adds	r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4a26      	ldr	r2, [pc, #152]	@ (8005e34 <USB_EP0_OutStart+0xb8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d90a      	bls.n	8005db6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db0:	d101      	bne.n	8005db6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e037      	b.n	8005e26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de4:	f043 0318 	orr.w	r3, r3, #24
 8005de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005dfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10f      	bne.n	8005e24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	4f54300a 	.word	0x4f54300a

08005e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e50:	d901      	bls.n	8005e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e01b      	b.n	8005e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	daf2      	bge.n	8005e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f043 0201 	orr.w	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e7a:	d901      	bls.n	8005e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e006      	b.n	8005e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d0f0      	beq.n	8005e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ea8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005eac:	f002 fc94 	bl	80087d8 <USBD_static_malloc>
 8005eb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d109      	bne.n	8005ecc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	32b0      	adds	r2, #176	@ 0xb0
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e0d4      	b.n	8006076 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ecc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f002 fcfe 	bl	80088d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	32b0      	adds	r2, #176	@ 0xb0
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32b0      	adds	r2, #176	@ 0xb0
 8005ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7c1b      	ldrb	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d138      	bne.n	8005f76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f04:	4b5e      	ldr	r3, [pc, #376]	@ (8006080 <USBD_CDC_Init+0x1e4>)
 8005f06:	7819      	ldrb	r1, [r3, #0]
 8005f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f002 fb3f 	bl	8008592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f14:	4b5a      	ldr	r3, [pc, #360]	@ (8006080 <USBD_CDC_Init+0x1e4>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	3324      	adds	r3, #36	@ 0x24
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f2e:	4b55      	ldr	r3, [pc, #340]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 8005f30:	7819      	ldrb	r1, [r3, #0]
 8005f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f36:	2202      	movs	r2, #2
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 fb2a 	bl	8008592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f3e:	4b51      	ldr	r3, [pc, #324]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f56:	2201      	movs	r2, #1
 8005f58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006088 <USBD_CDC_Init+0x1ec>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f003 020f 	and.w	r2, r3, #15
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3326      	adds	r3, #38	@ 0x26
 8005f70:	2210      	movs	r2, #16
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e035      	b.n	8005fe2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f76:	4b42      	ldr	r3, [pc, #264]	@ (8006080 <USBD_CDC_Init+0x1e4>)
 8005f78:	7819      	ldrb	r1, [r3, #0]
 8005f7a:	2340      	movs	r3, #64	@ 0x40
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 fb07 	bl	8008592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f84:	4b3e      	ldr	r3, [pc, #248]	@ (8006080 <USBD_CDC_Init+0x1e4>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3324      	adds	r3, #36	@ 0x24
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f9e:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 8005fa0:	7819      	ldrb	r1, [r3, #0]
 8005fa2:	2340      	movs	r3, #64	@ 0x40
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f002 faf3 	bl	8008592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fac:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <USBD_CDC_Init+0x1ec>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	3326      	adds	r3, #38	@ 0x26
 8005fde:	2210      	movs	r2, #16
 8005fe0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fe2:	4b29      	ldr	r3, [pc, #164]	@ (8006088 <USBD_CDC_Init+0x1ec>)
 8005fe4:	7819      	ldrb	r1, [r3, #0]
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	2203      	movs	r2, #3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f002 fad1 	bl	8008592 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ff0:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <USBD_CDC_Init+0x1ec>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3324      	adds	r3, #36	@ 0x24
 8006006:	2201      	movs	r2, #1
 8006008:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	33b0      	adds	r3, #176	@ 0xb0
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006040:	2302      	movs	r3, #2
 8006042:	e018      	b.n	8006076 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7c1b      	ldrb	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800604c:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 800604e:	7819      	ldrb	r1, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f002 fb88 	bl	8008770 <USBD_LL_PrepareReceive>
 8006060:	e008      	b.n	8006074 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006062:	4b08      	ldr	r3, [pc, #32]	@ (8006084 <USBD_CDC_Init+0x1e8>)
 8006064:	7819      	ldrb	r1, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800606c:	2340      	movs	r3, #64	@ 0x40
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 fb7e 	bl	8008770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000009b 	.word	0x2000009b
 8006084:	2000009c 	.word	0x2000009c
 8006088:	2000009d 	.word	0x2000009d

0800608c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006098:	4b3a      	ldr	r3, [pc, #232]	@ (8006184 <USBD_CDC_DeInit+0xf8>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 fa9d 	bl	80085de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060a4:	4b37      	ldr	r3, [pc, #220]	@ (8006184 <USBD_CDC_DeInit+0xf8>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3324      	adds	r3, #36	@ 0x24
 80060ba:	2200      	movs	r2, #0
 80060bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060be:	4b32      	ldr	r3, [pc, #200]	@ (8006188 <USBD_CDC_DeInit+0xfc>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f002 fa8a 	bl	80085de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006188 <USBD_CDC_DeInit+0xfc>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f003 020f 	and.w	r2, r3, #15
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060e2:	2200      	movs	r2, #0
 80060e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060e6:	4b29      	ldr	r3, [pc, #164]	@ (800618c <USBD_CDC_DeInit+0x100>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f002 fa76 	bl	80085de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060f2:	4b26      	ldr	r3, [pc, #152]	@ (800618c <USBD_CDC_DeInit+0x100>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	3324      	adds	r3, #36	@ 0x24
 8006108:	2200      	movs	r2, #0
 800610a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800610c:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <USBD_CDC_DeInit+0x100>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3326      	adds	r3, #38	@ 0x26
 8006122:	2200      	movs	r2, #0
 8006124:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32b0      	adds	r2, #176	@ 0xb0
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01f      	beq.n	8006178 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	33b0      	adds	r3, #176	@ 0xb0
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	@ 0xb0
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	4618      	mov	r0, r3
 800615c:	f002 fb4a 	bl	80087f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	32b0      	adds	r2, #176	@ 0xb0
 800616a:	2100      	movs	r1, #0
 800616c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	2000009b 	.word	0x2000009b
 8006188:	2000009c 	.word	0x2000009c
 800618c:	2000009d 	.word	0x2000009d

08006190 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	32b0      	adds	r2, #176	@ 0xb0
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0bf      	b.n	8006340 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d050      	beq.n	800626e <USBD_CDC_Setup+0xde>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f040 80af 	bne.w	8006330 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	88db      	ldrh	r3, [r3, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03a      	beq.n	8006250 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	b25b      	sxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da1b      	bge.n	800621c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	33b0      	adds	r3, #176	@ 0xb0
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	88d2      	ldrh	r2, [r2, #6]
 8006200:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b07      	cmp	r3, #7
 8006208:	bf28      	it	cs
 800620a:	2307      	movcs	r3, #7
 800620c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	89fa      	ldrh	r2, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 fd93 	bl	8007d40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800621a:	e090      	b.n	800633e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785a      	ldrb	r2, [r3, #1]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	88db      	ldrh	r3, [r3, #6]
 800622a:	2b3f      	cmp	r3, #63	@ 0x3f
 800622c:	d803      	bhi.n	8006236 <USBD_CDC_Setup+0xa6>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	88db      	ldrh	r3, [r3, #6]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	e000      	b.n	8006238 <USBD_CDC_Setup+0xa8>
 8006236:	2240      	movs	r2, #64	@ 0x40
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006246:	461a      	mov	r2, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fda5 	bl	8007d98 <USBD_CtlPrepareRx>
      break;
 800624e:	e076      	b.n	800633e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	33b0      	adds	r3, #176	@ 0xb0
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	7850      	ldrb	r0, [r2, #1]
 8006266:	2200      	movs	r2, #0
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	4798      	blx	r3
      break;
 800626c:	e067      	b.n	800633e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	2b0b      	cmp	r3, #11
 8006274:	d851      	bhi.n	800631a <USBD_CDC_Setup+0x18a>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <USBD_CDC_Setup+0xec>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062ad 	.word	0x080062ad
 8006280:	08006329 	.word	0x08006329
 8006284:	0800631b 	.word	0x0800631b
 8006288:	0800631b 	.word	0x0800631b
 800628c:	0800631b 	.word	0x0800631b
 8006290:	0800631b 	.word	0x0800631b
 8006294:	0800631b 	.word	0x0800631b
 8006298:	0800631b 	.word	0x0800631b
 800629c:	0800631b 	.word	0x0800631b
 80062a0:	0800631b 	.word	0x0800631b
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	08006301 	.word	0x08006301
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d107      	bne.n	80062c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062b8:	f107 030a 	add.w	r3, r7, #10
 80062bc:	2202      	movs	r2, #2
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fd3d 	bl	8007d40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062c6:	e032      	b.n	800632e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fcbb 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 80062d0:	2303      	movs	r3, #3
 80062d2:	75fb      	strb	r3, [r7, #23]
          break;
 80062d4:	e02b      	b.n	800632e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d107      	bne.n	80062f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062e2:	f107 030d 	add.w	r3, r7, #13
 80062e6:	2201      	movs	r2, #1
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fd28 	bl	8007d40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062f0:	e01d      	b.n	800632e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fca6 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	75fb      	strb	r3, [r7, #23]
          break;
 80062fe:	e016      	b.n	800632e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b03      	cmp	r3, #3
 800630a:	d00f      	beq.n	800632c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fc99 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006318:	e008      	b.n	800632c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fc92 	bl	8007c46 <USBD_CtlError>
          ret = USBD_FAIL;
 8006322:	2303      	movs	r3, #3
 8006324:	75fb      	strb	r3, [r7, #23]
          break;
 8006326:	e002      	b.n	800632e <USBD_CDC_Setup+0x19e>
          break;
 8006328:	bf00      	nop
 800632a:	e008      	b.n	800633e <USBD_CDC_Setup+0x1ae>
          break;
 800632c:	bf00      	nop
      }
      break;
 800632e:	e006      	b.n	800633e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fc87 	bl	8007c46 <USBD_CtlError>
      ret = USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	bf00      	nop
  }

  return (uint8_t)ret;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800635a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32b0      	adds	r2, #176	@ 0xb0
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	e065      	b.n	800643e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32b0      	adds	r2, #176	@ 0xb0
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3318      	adds	r3, #24
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02f      	beq.n	80063fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	3318      	adds	r3, #24
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	f003 010f 	and.w	r1, r3, #15
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	460b      	mov	r3, r1
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4403      	add	r3, r0
 80063c4:	331c      	adds	r3, #28
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d112      	bne.n	80063fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	3318      	adds	r3, #24
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063ee:	78f9      	ldrb	r1, [r7, #3]
 80063f0:	2300      	movs	r3, #0
 80063f2:	2200      	movs	r2, #0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f002 f99a 	bl	800872e <USBD_LL_Transmit>
 80063fa:	e01f      	b.n	800643c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	33b0      	adds	r3, #176	@ 0xb0
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	33b0      	adds	r3, #176	@ 0xb0
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	32b0      	adds	r2, #176	@ 0xb0
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	32b0      	adds	r2, #176	@ 0xb0
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e01a      	b.n	80064ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f002 f998 	bl	80087b2 <USBD_LL_GetRxDataSize>
 8006482:	4602      	mov	r2, r0
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	33b0      	adds	r3, #176	@ 0xb0
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80064a8:	4611      	mov	r1, r2
 80064aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	32b0      	adds	r2, #176	@ 0xb0
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e024      	b.n	8006522 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	33b0      	adds	r3, #176	@ 0xb0
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d019      	beq.n	8006520 <USBD_CDC_EP0_RxReady+0x6a>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064f2:	2bff      	cmp	r3, #255	@ 0xff
 80064f4:	d014      	beq.n	8006520 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	33b0      	adds	r3, #176	@ 0xb0
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800650e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006516:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	22ff      	movs	r2, #255	@ 0xff
 800651c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006534:	2182      	movs	r1, #130	@ 0x82
 8006536:	4818      	ldr	r0, [pc, #96]	@ (8006598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006538:	f000 fd4f 	bl	8006fda <USBD_GetEpDesc>
 800653c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800653e:	2101      	movs	r1, #1
 8006540:	4815      	ldr	r0, [pc, #84]	@ (8006598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006542:	f000 fd4a 	bl	8006fda <USBD_GetEpDesc>
 8006546:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006548:	2181      	movs	r1, #129	@ 0x81
 800654a:	4813      	ldr	r0, [pc, #76]	@ (8006598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800654c:	f000 fd45 	bl	8006fda <USBD_GetEpDesc>
 8006550:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2210      	movs	r2, #16
 800655c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2200      	movs	r2, #0
 8006568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800656c:	711a      	strb	r2, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d006      	beq.n	8006586 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006580:	711a      	strb	r2, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2243      	movs	r2, #67	@ 0x43
 800658a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800658c:	4b02      	ldr	r3, [pc, #8]	@ (8006598 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000058 	.word	0x20000058

0800659c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065a4:	2182      	movs	r1, #130	@ 0x82
 80065a6:	4818      	ldr	r0, [pc, #96]	@ (8006608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065a8:	f000 fd17 	bl	8006fda <USBD_GetEpDesc>
 80065ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ae:	2101      	movs	r1, #1
 80065b0:	4815      	ldr	r0, [pc, #84]	@ (8006608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065b2:	f000 fd12 	bl	8006fda <USBD_GetEpDesc>
 80065b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065b8:	2181      	movs	r1, #129	@ 0x81
 80065ba:	4813      	ldr	r0, [pc, #76]	@ (8006608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065bc:	f000 fd0d 	bl	8006fda <USBD_GetEpDesc>
 80065c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2210      	movs	r2, #16
 80065cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d006      	beq.n	80065e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2200      	movs	r2, #0
 80065d8:	711a      	strb	r2, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f042 0202 	orr.w	r2, r2, #2
 80065e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	711a      	strb	r2, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f042 0202 	orr.w	r2, r2, #2
 80065f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2243      	movs	r2, #67	@ 0x43
 80065fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000058 	.word	0x20000058

0800660c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006614:	2182      	movs	r1, #130	@ 0x82
 8006616:	4818      	ldr	r0, [pc, #96]	@ (8006678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006618:	f000 fcdf 	bl	8006fda <USBD_GetEpDesc>
 800661c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800661e:	2101      	movs	r1, #1
 8006620:	4815      	ldr	r0, [pc, #84]	@ (8006678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006622:	f000 fcda 	bl	8006fda <USBD_GetEpDesc>
 8006626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006628:	2181      	movs	r1, #129	@ 0x81
 800662a:	4813      	ldr	r0, [pc, #76]	@ (8006678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800662c:	f000 fcd5 	bl	8006fda <USBD_GetEpDesc>
 8006630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2210      	movs	r2, #16
 800663c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d006      	beq.n	8006652 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2200      	movs	r2, #0
 8006648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800664c:	711a      	strb	r2, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006660:	711a      	strb	r2, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2243      	movs	r2, #67	@ 0x43
 800666a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000058 	.word	0x20000058

0800667c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	220a      	movs	r2, #10
 8006688:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800668a:	4b03      	ldr	r3, [pc, #12]	@ (8006698 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000014 	.word	0x20000014

0800669c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e009      	b.n	80066c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	33b0      	adds	r3, #176	@ 0xb0
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	32b0      	adds	r2, #176	@ 0xb0
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e008      	b.n	8006708 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	32b0      	adds	r2, #176	@ 0xb0
 8006728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006734:	2303      	movs	r3, #3
 8006736:	e004      	b.n	8006742 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	32b0      	adds	r2, #176	@ 0xb0
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	e025      	b.n	80067c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800677c:	2b00      	cmp	r3, #0
 800677e:	d11f      	bne.n	80067c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006788:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <USBD_CDC_TransmitPacket+0x7c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4403      	add	r3, r0
 80067a2:	3318      	adds	r3, #24
 80067a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067a6:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <USBD_CDC_TransmitPacket+0x7c>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 ffb9 	bl	800872e <USBD_LL_Transmit>

    ret = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000009b 	.word	0x2000009b

080067d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32b0      	adds	r2, #176	@ 0xb0
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32b0      	adds	r2, #176	@ 0xb0
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e018      	b.n	8006830 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	7c1b      	ldrb	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006806:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <USBD_CDC_ReceivePacket+0x68>)
 8006808:	7819      	ldrb	r1, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 ffab 	bl	8008770 <USBD_LL_PrepareReceive>
 800681a:	e008      	b.n	800682e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <USBD_CDC_ReceivePacket+0x68>)
 800681e:	7819      	ldrb	r1, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006826:	2340      	movs	r3, #64	@ 0x40
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ffa1 	bl	8008770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	2000009c 	.word	0x2000009c

0800683c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	e01f      	b.n	8006894 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	79fa      	ldrb	r2, [r7, #7]
 8006886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 fe1b 	bl	80084c4 <USBD_LL_Init>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e025      	b.n	8006900 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32ae      	adds	r2, #174	@ 0xae
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00f      	beq.n	80068f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32ae      	adds	r2, #174	@ 0xae
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	f107 020e 	add.w	r2, r7, #14
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fe23 	bl	800855c <USBD_LL_Start>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006928:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	4611      	mov	r1, r2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f90c 	bl	8007bd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d01a      	beq.n	8006a14 <USBD_LL_SetupStage+0x72>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d822      	bhi.n	8006a28 <USBD_LL_SetupStage+0x86>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <USBD_LL_SetupStage+0x4a>
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d00a      	beq.n	8006a00 <USBD_LL_SetupStage+0x5e>
 80069ea:	e01d      	b.n	8006a28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb63 	bl	80070c0 <USBD_StdDevReq>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	e020      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbcb 	bl	80071a4 <USBD_StdItfReq>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73fb      	strb	r3, [r7, #15]
      break;
 8006a12:	e016      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc2d 	bl	800727c <USBD_StdEPReq>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
      break;
 8006a26:	e00c      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fdf0 	bl	800861c <USBD_LL_StallEP>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	bf00      	nop
  }

  return ret;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	460b      	mov	r3, r1
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d16e      	bne.n	8006b42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f040 8098 	bne.w	8006ba8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d913      	bls.n	8006aac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	1ad2      	subs	r2, r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	bf28      	it	cs
 8006a9e:	4613      	movcs	r3, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f001 f994 	bl	8007dd2 <USBD_CtlContinueRx>
 8006aaa:	e07d      	b.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d014      	beq.n	8006ae4 <USBD_LL_DataOutStage+0x98>
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d81d      	bhi.n	8006afa <USBD_LL_DataOutStage+0xae>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <USBD_LL_DataOutStage+0x7c>
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d003      	beq.n	8006ace <USBD_LL_DataOutStage+0x82>
 8006ac6:	e018      	b.n	8006afa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75bb      	strb	r3, [r7, #22]
            break;
 8006acc:	e018      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fa64 	bl	8006fa6 <USBD_CoreFindIF>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae2:	e00d      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa66 	bl	8006fc0 <USBD_CoreFindEP>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75bb      	strb	r3, [r7, #22]
            break;
 8006af8:	e002      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75bb      	strb	r3, [r7, #22]
            break;
 8006afe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b00:	7dbb      	ldrb	r3, [r7, #22]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d119      	bne.n	8006b3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d113      	bne.n	8006b3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b12:	7dba      	ldrb	r2, [r7, #22]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	32ae      	adds	r2, #174	@ 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b22:	7dba      	ldrb	r2, [r7, #22]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b2a:	7dba      	ldrb	r2, [r7, #22]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	32ae      	adds	r2, #174	@ 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 f95a 	bl	8007df4 <USBD_CtlSendStatus>
 8006b40:	e032      	b.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fa37 	bl	8006fc0 <USBD_CoreFindEP>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b56:	7dbb      	ldrb	r3, [r7, #22]
 8006b58:	2bff      	cmp	r3, #255	@ 0xff
 8006b5a:	d025      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d122      	bne.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d117      	bne.n	8006b9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b6e:	7dba      	ldrb	r2, [r7, #22]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	@ 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b7e:	7dba      	ldrb	r2, [r7, #22]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	32ae      	adds	r2, #174	@ 0xae
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	7afa      	ldrb	r2, [r7, #11]
 8006b94:	4611      	mov	r1, r2
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	e000      	b.n	8006baa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d16f      	bne.n	8006ca6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d15a      	bne.n	8006c8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d914      	bls.n	8006c0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 f8bc 	bl	8007d76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fdb3 	bl	8008770 <USBD_LL_PrepareReceive>
 8006c0a:	e03f      	b.n	8006c8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d11c      	bne.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d316      	bcc.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20f      	bcs.n	8006c52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f001 f89d 	bl	8007d76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 fd90 	bl	8008770 <USBD_LL_PrepareReceive>
 8006c50:	e01c      	b.n	8006c8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d10f      	bne.n	8006c7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7e:	2180      	movs	r1, #128	@ 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 fccb 	bl	800861c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f001 f8c7 	bl	8007e1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03a      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fe42 	bl	8006920 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ca4:	e032      	b.n	8006d0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ca6:	7afb      	ldrb	r3, [r7, #11]
 8006ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f985 	bl	8006fc0 <USBD_CoreFindEP>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2bff      	cmp	r3, #255	@ 0xff
 8006cbe:	d025      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d122      	bne.n	8006d0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d11c      	bne.n	8006d0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cd2:	7dfa      	ldrb	r2, [r7, #23]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	32ae      	adds	r2, #174	@ 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d014      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ce2:	7dfa      	ldrb	r2, [r7, #23]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	32ae      	adds	r2, #174	@ 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	7afa      	ldrb	r2, [r7, #11]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	4798      	blx	r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d08:	7dbb      	ldrb	r3, [r7, #22]
 8006d0a:	e000      	b.n	8006d0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7c:	2340      	movs	r3, #64	@ 0x40
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fc05 	bl	8008592 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2240      	movs	r2, #64	@ 0x40
 8006d94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d98:	2340      	movs	r3, #64	@ 0x40
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2180      	movs	r1, #128	@ 0x80
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fbf7 	bl	8008592 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2240      	movs	r2, #64	@ 0x40
 8006dae:	621a      	str	r2, [r3, #32]

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d006      	beq.n	8006dfc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d106      	bne.n	8006e34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d110      	bne.n	8006e78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	32ae      	adds	r2, #174	@ 0xae
 8006e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e01c      	b.n	8006ede <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d115      	bne.n	8006edc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32ae      	adds	r2, #174	@ 0xae
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32ae      	adds	r2, #174	@ 0xae
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32ae      	adds	r2, #174	@ 0xae
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e01c      	b.n	8006f42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d115      	bne.n	8006f40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	@ 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32ae      	adds	r2, #174	@ 0xae
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6852      	ldr	r2, [r2, #4]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d91f      	bls.n	8007040 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007006:	e013      	b.n	8007030 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007008:	f107 030a 	add.w	r3, r7, #10
 800700c:	4619      	mov	r1, r3
 800700e:	6978      	ldr	r0, [r7, #20]
 8007010:	f000 f81b 	bl	800704a <USBD_GetNextDesc>
 8007014:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d108      	bne.n	8007030 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	429a      	cmp	r2, r3
 800702a:	d008      	beq.n	800703e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	b29a      	uxth	r2, r3
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	429a      	cmp	r2, r3
 800703a:	d8e5      	bhi.n	8007008 <USBD_GetEpDesc+0x2e>
 800703c:	e000      	b.n	8007040 <USBD_GetEpDesc+0x66>
          break;
 800703e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	4413      	add	r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007082:	b480      	push	{r7}
 8007084:	b087      	sub	sp, #28
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	3301      	adds	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070a0:	8a3b      	ldrh	r3, [r7, #16]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	b21a      	sxth	r2, r3
 80070a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b21b      	sxth	r3, r3
 80070ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070b0:	89fb      	ldrh	r3, [r7, #14]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d005      	beq.n	80070e6 <USBD_StdDevReq+0x26>
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	d857      	bhi.n	800718e <USBD_StdDevReq+0xce>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <USBD_StdDevReq+0x42>
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d153      	bne.n	800718e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32ae      	adds	r2, #174	@ 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007100:	e04a      	b.n	8007198 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b09      	cmp	r3, #9
 8007108:	d83b      	bhi.n	8007182 <USBD_StdDevReq+0xc2>
 800710a:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <USBD_StdDevReq+0x50>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007165 	.word	0x08007165
 8007114:	08007179 	.word	0x08007179
 8007118:	08007183 	.word	0x08007183
 800711c:	0800716f 	.word	0x0800716f
 8007120:	08007183 	.word	0x08007183
 8007124:	08007143 	.word	0x08007143
 8007128:	08007139 	.word	0x08007139
 800712c:	08007183 	.word	0x08007183
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800714d 	.word	0x0800714d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa3c 	bl	80075b8 <USBD_GetDescriptor>
          break;
 8007140:	e024      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fba1 	bl	800788c <USBD_SetAddress>
          break;
 800714a:	e01f      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fbe0 	bl	8007914 <USBD_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
          break;
 8007158:	e018      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc83 	bl	8007a68 <USBD_GetConfig>
          break;
 8007162:	e013      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fcb4 	bl	8007ad4 <USBD_GetStatus>
          break;
 800716c:	e00e      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fce3 	bl	8007b3c <USBD_SetFeature>
          break;
 8007176:	e009      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd07 	bl	8007b8e <USBD_ClrFeature>
          break;
 8007180:	e004      	b.n	800718c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fd5e 	bl	8007c46 <USBD_CtlError>
          break;
 800718a:	bf00      	nop
      }
      break;
 800718c:	e004      	b.n	8007198 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd58 	bl	8007c46 <USBD_CtlError>
      break;
 8007196:	bf00      	nop
  }

  return ret;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d005      	beq.n	80071ca <USBD_StdItfReq+0x26>
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d852      	bhi.n	8007268 <USBD_StdItfReq+0xc4>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <USBD_StdItfReq+0x26>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d14e      	bne.n	8007268 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d840      	bhi.n	800725a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	889b      	ldrh	r3, [r3, #4]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d836      	bhi.n	8007250 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	889b      	ldrh	r3, [r3, #4]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fedb 	bl	8006fa6 <USBD_CoreFindIF>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2bff      	cmp	r3, #255	@ 0xff
 80071f8:	d01d      	beq.n	8007236 <USBD_StdItfReq+0x92>
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11a      	bne.n	8007236 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007200:	7bba      	ldrb	r2, [r7, #14]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32ae      	adds	r2, #174	@ 0xae
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00f      	beq.n	8007230 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007210:	7bba      	ldrb	r2, [r7, #14]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007218:	7bba      	ldrb	r2, [r7, #14]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	@ 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800722e:	e004      	b.n	800723a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007234:	e001      	b.n	800723a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	88db      	ldrh	r3, [r3, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d110      	bne.n	8007264 <USBD_StdItfReq+0xc0>
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10d      	bne.n	8007264 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fdd3 	bl	8007df4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800724e:	e009      	b.n	8007264 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcf7 	bl	8007c46 <USBD_CtlError>
          break;
 8007258:	e004      	b.n	8007264 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fcf2 	bl	8007c46 <USBD_CtlError>
          break;
 8007262:	e000      	b.n	8007266 <USBD_StdItfReq+0xc2>
          break;
 8007264:	bf00      	nop
      }
      break;
 8007266:	e004      	b.n	8007272 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fceb 	bl	8007c46 <USBD_CtlError>
      break;
 8007270:	bf00      	nop
  }

  return ret;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	889b      	ldrh	r3, [r3, #4]
 800728e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007298:	2b40      	cmp	r3, #64	@ 0x40
 800729a:	d007      	beq.n	80072ac <USBD_StdEPReq+0x30>
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	f200 817f 	bhi.w	80075a0 <USBD_StdEPReq+0x324>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d02a      	beq.n	80072fc <USBD_StdEPReq+0x80>
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	f040 817a 	bne.w	80075a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fe85 	bl	8006fc0 <USBD_CoreFindEP>
 80072b6:	4603      	mov	r3, r0
 80072b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	2bff      	cmp	r3, #255	@ 0xff
 80072be:	f000 8174 	beq.w	80075aa <USBD_StdEPReq+0x32e>
 80072c2:	7b7b      	ldrb	r3, [r7, #13]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8170 	bne.w	80075aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072ca:	7b7a      	ldrb	r2, [r7, #13]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	32ae      	adds	r2, #174	@ 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8163 	beq.w	80075aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072e4:	7b7a      	ldrb	r2, [r7, #13]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32ae      	adds	r2, #174	@ 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072fa:	e156      	b.n	80075aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d008      	beq.n	8007316 <USBD_StdEPReq+0x9a>
 8007304:	2b03      	cmp	r3, #3
 8007306:	f300 8145 	bgt.w	8007594 <USBD_StdEPReq+0x318>
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 809b 	beq.w	8007446 <USBD_StdEPReq+0x1ca>
 8007310:	2b01      	cmp	r3, #1
 8007312:	d03c      	beq.n	800738e <USBD_StdEPReq+0x112>
 8007314:	e13e      	b.n	8007594 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d002      	beq.n	8007328 <USBD_StdEPReq+0xac>
 8007322:	2b03      	cmp	r3, #3
 8007324:	d016      	beq.n	8007354 <USBD_StdEPReq+0xd8>
 8007326:	e02c      	b.n	8007382 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_StdEPReq+0xce>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d00a      	beq.n	800734a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f96f 	bl	800861c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800733e:	2180      	movs	r1, #128	@ 0x80
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f96b 	bl	800861c <USBD_LL_StallEP>
 8007346:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007348:	e020      	b.n	800738c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fc7a 	bl	8007c46 <USBD_CtlError>
              break;
 8007352:	e01b      	b.n	800738c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	885b      	ldrh	r3, [r3, #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10e      	bne.n	800737a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <USBD_StdEPReq+0xfe>
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b80      	cmp	r3, #128	@ 0x80
 8007366:	d008      	beq.n	800737a <USBD_StdEPReq+0xfe>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	88db      	ldrh	r3, [r3, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f951 	bl	800861c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fd3a 	bl	8007df4 <USBD_CtlSendStatus>

              break;
 8007380:	e004      	b.n	800738c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc5e 	bl	8007c46 <USBD_CtlError>
              break;
 800738a:	bf00      	nop
          }
          break;
 800738c:	e107      	b.n	800759e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d002      	beq.n	80073a0 <USBD_StdEPReq+0x124>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d016      	beq.n	80073cc <USBD_StdEPReq+0x150>
 800739e:	e04b      	b.n	8007438 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <USBD_StdEPReq+0x146>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	@ 0x80
 80073aa:	d00a      	beq.n	80073c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f933 	bl	800861c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b6:	2180      	movs	r1, #128	@ 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f92f 	bl	800861c <USBD_LL_StallEP>
 80073be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c0:	e040      	b.n	8007444 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc3e 	bl	8007c46 <USBD_CtlError>
              break;
 80073ca:	e03b      	b.n	8007444 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d136      	bne.n	8007442 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f939 	bl	800865a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fd03 	bl	8007df4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fde4 	bl	8006fc0 <USBD_CoreFindEP>
 80073f8:	4603      	mov	r3, r0
 80073fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fc:	7b7b      	ldrb	r3, [r7, #13]
 80073fe:	2bff      	cmp	r3, #255	@ 0xff
 8007400:	d01f      	beq.n	8007442 <USBD_StdEPReq+0x1c6>
 8007402:	7b7b      	ldrb	r3, [r7, #13]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11c      	bne.n	8007442 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007410:	7b7a      	ldrb	r2, [r7, #13]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	32ae      	adds	r2, #174	@ 0xae
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d010      	beq.n	8007442 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007420:	7b7a      	ldrb	r2, [r7, #13]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32ae      	adds	r2, #174	@ 0xae
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007436:	e004      	b.n	8007442 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc03 	bl	8007c46 <USBD_CtlError>
              break;
 8007440:	e000      	b.n	8007444 <USBD_StdEPReq+0x1c8>
              break;
 8007442:	bf00      	nop
          }
          break;
 8007444:	e0ab      	b.n	800759e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d002      	beq.n	8007458 <USBD_StdEPReq+0x1dc>
 8007452:	2b03      	cmp	r3, #3
 8007454:	d032      	beq.n	80074bc <USBD_StdEPReq+0x240>
 8007456:	e097      	b.n	8007588 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <USBD_StdEPReq+0x1f2>
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b80      	cmp	r3, #128	@ 0x80
 8007462:	d004      	beq.n	800746e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fbed 	bl	8007c46 <USBD_CtlError>
                break;
 800746c:	e091      	b.n	8007592 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800746e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007472:	2b00      	cmp	r3, #0
 8007474:	da0b      	bge.n	800748e <USBD_StdEPReq+0x212>
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	3310      	adds	r3, #16
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	3304      	adds	r3, #4
 800748c:	e00b      	b.n	80074a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	3304      	adds	r3, #4
 80074a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2202      	movs	r2, #2
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc43 	bl	8007d40 <USBD_CtlSendData>
              break;
 80074ba:	e06a      	b.n	8007592 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da11      	bge.n	80074e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	3324      	adds	r3, #36	@ 0x24
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d117      	bne.n	800750e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fbb0 	bl	8007c46 <USBD_CtlError>
                  break;
 80074e6:	e054      	b.n	8007592 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb9d 	bl	8007c46 <USBD_CtlError>
                  break;
 800750c:	e041      	b.n	8007592 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800750e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da0b      	bge.n	800752e <USBD_StdEPReq+0x2b2>
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	3310      	adds	r3, #16
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	3304      	adds	r3, #4
 800752c:	e00b      	b.n	8007546 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <USBD_StdEPReq+0x2d8>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b80      	cmp	r3, #128	@ 0x80
 8007552:	d103      	bne.n	800755c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e00e      	b.n	800757a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f899 	bl	8008698 <USBD_LL_IsStallEP>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e002      	b.n	800757a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2202      	movs	r2, #2
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fbdd 	bl	8007d40 <USBD_CtlSendData>
              break;
 8007586:	e004      	b.n	8007592 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb5b 	bl	8007c46 <USBD_CtlError>
              break;
 8007590:	bf00      	nop
          }
          break;
 8007592:	e004      	b.n	800759e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fb55 	bl	8007c46 <USBD_CtlError>
          break;
 800759c:	bf00      	nop
      }
      break;
 800759e:	e005      	b.n	80075ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb4f 	bl	8007c46 <USBD_CtlError>
      break;
 80075a8:	e000      	b.n	80075ac <USBD_StdEPReq+0x330>
      break;
 80075aa:	bf00      	nop
  }

  return ret;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b06      	cmp	r3, #6
 80075da:	f200 8128 	bhi.w	800782e <USBD_GetDescriptor+0x276>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <USBD_GetDescriptor+0x2c>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007659 	.word	0x08007659
 80075f0:	0800782f 	.word	0x0800782f
 80075f4:	0800782f 	.word	0x0800782f
 80075f8:	080077cf 	.word	0x080077cf
 80075fc:	080077fb 	.word	0x080077fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
      break;
 8007616:	e112      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c1b      	ldrb	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	2202      	movs	r2, #2
 8007638:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800763a:	e100      	b.n	800783e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	f107 0208 	add.w	r2, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	e0f2      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	f200 80ac 	bhi.w	80077bc <USBD_GetDescriptor+0x204>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <USBD_GetDescriptor+0xb4>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007685 	.word	0x08007685
 8007670:	080076b9 	.word	0x080076b9
 8007674:	080076ed 	.word	0x080076ed
 8007678:	08007721 	.word	0x08007721
 800767c:	08007755 	.word	0x08007755
 8007680:	08007789 	.word	0x08007789
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e091      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 facb 	bl	8007c46 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e089      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e077      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fab1 	bl	8007c46 <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e06f      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e05d      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa97 	bl	8007c46 <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e055      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e043      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa7d 	bl	8007c46 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e03b      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e029      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa63 	bl	8007c46 <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e021      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077aa:	e00f      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa49 	bl	8007c46 <USBD_CtlError>
            err++;
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	3301      	adds	r3, #1
 80077b8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ba:	e007      	b.n	80077cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa41 	bl	8007c46 <USBD_CtlError>
          err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077ca:	bf00      	nop
      }
      break;
 80077cc:	e037      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e8:	e029      	b.n	800783e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa2a 	bl	8007c46 <USBD_CtlError>
        err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	e021      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c1b      	ldrb	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10d      	bne.n	800781e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	4610      	mov	r0, r2
 8007810:	4798      	blx	r3
 8007812:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	2207      	movs	r2, #7
 800781a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800781c:	e00f      	b.n	800783e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa10 	bl	8007c46 <USBD_CtlError>
        err++;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	3301      	adds	r3, #1
 800782a:	72fb      	strb	r3, [r7, #11]
      break;
 800782c:	e007      	b.n	800783e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa08 	bl	8007c46 <USBD_CtlError>
      err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	bf00      	nop
  }

  if (err != 0U)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11e      	bne.n	8007882 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88da      	ldrh	r2, [r3, #6]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	4293      	cmp	r3, r2
 800785a:	bf28      	it	cs
 800785c:	4613      	movcs	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	461a      	mov	r2, r3
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa69 	bl	8007d40 <USBD_CtlSendData>
 800786e:	e009      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9e7 	bl	8007c46 <USBD_CtlError>
 8007878:	e004      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 faba 	bl	8007df4 <USBD_CtlSendStatus>
 8007880:	e000      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    return;
 8007882:	bf00      	nop
  }
}
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	889b      	ldrh	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d131      	bne.n	8007902 <USBD_SetAddress+0x76>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d12d      	bne.n	8007902 <USBD_SetAddress+0x76>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80078ac:	d829      	bhi.n	8007902 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d104      	bne.n	80078d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9bc 	bl	8007c46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	e01d      	b.n	800790c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7bfa      	ldrb	r2, [r7, #15]
 80078d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 ff07 	bl	80086f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa86 	bl	8007df4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	e009      	b.n	800790c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e004      	b.n	800790c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f99e 	bl	8007c46 <USBD_CtlError>
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	4b4e      	ldr	r3, [pc, #312]	@ (8007a64 <USBD_SetConfig+0x150>)
 800792a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800792c:	4b4d      	ldr	r3, [pc, #308]	@ (8007a64 <USBD_SetConfig+0x150>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d905      	bls.n	8007940 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f985 	bl	8007c46 <USBD_CtlError>
    return USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e08c      	b.n	8007a5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d002      	beq.n	8007952 <USBD_SetConfig+0x3e>
 800794c:	2b03      	cmp	r3, #3
 800794e:	d029      	beq.n	80079a4 <USBD_SetConfig+0x90>
 8007950:	e075      	b.n	8007a3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007952:	4b44      	ldr	r3, [pc, #272]	@ (8007a64 <USBD_SetConfig+0x150>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d020      	beq.n	800799c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800795a:	4b42      	ldr	r3, [pc, #264]	@ (8007a64 <USBD_SetConfig+0x150>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007964:	4b3f      	ldr	r3, [pc, #252]	@ (8007a64 <USBD_SetConfig+0x150>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fe ffe3 	bl	8006936 <USBD_SetClassConfig>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f962 	bl	8007c46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800798a:	e065      	b.n	8007a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa31 	bl	8007df4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2203      	movs	r2, #3
 8007996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800799a:	e05d      	b.n	8007a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa29 	bl	8007df4 <USBD_CtlSendStatus>
      break;
 80079a2:	e059      	b.n	8007a58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079a4:	4b2f      	ldr	r3, [pc, #188]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d112      	bne.n	80079d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80079b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079be:	4b29      	ldr	r3, [pc, #164]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fe ffd2 	bl	800696e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa12 	bl	8007df4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079d0:	e042      	b.n	8007a58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079d2:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d02a      	beq.n	8007a36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe ffc0 	bl	800696e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a64 <USBD_SetConfig+0x150>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fe ff99 	bl	8006936 <USBD_SetClassConfig>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f918 	bl	8007c46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fe ffa5 	bl	800696e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a2c:	e014      	b.n	8007a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9e0 	bl	8007df4 <USBD_CtlSendStatus>
      break;
 8007a34:	e010      	b.n	8007a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9dc 	bl	8007df4 <USBD_CtlSendStatus>
      break;
 8007a3c:	e00c      	b.n	8007a58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f900 	bl	8007c46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a46:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fe ff8e 	bl	800696e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	bf00      	nop
  }

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000728 	.word	0x20000728

08007a68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d004      	beq.n	8007a84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8e2 	bl	8007c46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a82:	e023      	b.n	8007acc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	dc02      	bgt.n	8007a96 <USBD_GetConfig+0x2e>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc03      	bgt.n	8007a9c <USBD_GetConfig+0x34>
 8007a94:	e015      	b.n	8007ac2 <USBD_GetConfig+0x5a>
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d00b      	beq.n	8007ab2 <USBD_GetConfig+0x4a>
 8007a9a:	e012      	b.n	8007ac2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f948 	bl	8007d40 <USBD_CtlSendData>
        break;
 8007ab0:	e00c      	b.n	8007acc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f940 	bl	8007d40 <USBD_CtlSendData>
        break;
 8007ac0:	e004      	b.n	8007acc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8be 	bl	8007c46 <USBD_CtlError>
        break;
 8007aca:	bf00      	nop
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d81e      	bhi.n	8007b2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	88db      	ldrh	r3, [r3, #6]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d004      	beq.n	8007afe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8a5 	bl	8007c46 <USBD_CtlError>
        break;
 8007afc:	e01a      	b.n	8007b34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f043 0202 	orr.w	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f90c 	bl	8007d40 <USBD_CtlSendData>
      break;
 8007b28:	e004      	b.n	8007b34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f88a 	bl	8007c46 <USBD_CtlError>
      break;
 8007b32:	bf00      	nop
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d107      	bne.n	8007b5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f94c 	bl	8007df4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b5c:	e013      	b.n	8007b86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	885b      	ldrh	r3, [r3, #2]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d10b      	bne.n	8007b7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	889b      	ldrh	r3, [r3, #4]
 8007b6a:	0a1b      	lsrs	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f93c 	bl	8007df4 <USBD_CtlSendStatus>
}
 8007b7c:	e003      	b.n	8007b86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f860 	bl	8007c46 <USBD_CtlError>
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d80b      	bhi.n	8007bbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d10c      	bne.n	8007bc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f91c 	bl	8007df4 <USBD_CtlSendStatus>
      }
      break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f840 	bl	8007c46 <USBD_CtlError>
      break;
 8007bc6:	e000      	b.n	8007bca <USBD_ClrFeature+0x3c>
      break;
 8007bc8:	bf00      	nop
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fa40 	bl	8007082 <SWAPBYTE>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fa33 	bl	8007082 <SWAPBYTE>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fa26 	bl	8007082 <SWAPBYTE>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	80da      	strh	r2, [r3, #6]
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c50:	2180      	movs	r1, #128	@ 0x80
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fce2 	bl	800861c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fcde 	bl	800861c <USBD_LL_StallEP>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d042      	beq.n	8007d04 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f000 f842 	bl	8007d0c <USBD_GetLen>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c92:	d808      	bhi.n	8007ca6 <USBD_GetString+0x3e>
 8007c94:	6938      	ldr	r0, [r7, #16]
 8007c96:	f000 f839 	bl	8007d0c <USBD_GetLen>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	e001      	b.n	8007caa <USBD_GetString+0x42>
 8007ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cd0:	e013      	b.n	8007cfa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
    idx++;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	4413      	add	r3, r2
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e7      	bne.n	8007cd2 <USBD_GetString+0x6a>
 8007d02:	e000      	b.n	8007d06 <USBD_GetString+0x9e>
    return;
 8007d04:	bf00      	nop
  }
}
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d1c:	e005      	b.n	8007d2a <USBD_GetLen+0x1e>
  {
    len++;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	3301      	adds	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1f5      	bne.n	8007d1e <USBD_GetLen+0x12>
  }

  return len;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	2100      	movs	r1, #0
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fce1 	bl	800872e <USBD_LL_Transmit>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fcd0 	bl	800872e <USBD_LL_Transmit>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2203      	movs	r2, #3
 8007da8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fcd4 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fcc3 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e04:	2300      	movs	r3, #0
 8007e06:	2200      	movs	r2, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc8f 	bl	800872e <USBD_LL_Transmit>

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2205      	movs	r2, #5
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2100      	movs	r1, #0
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc9d 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e44:	2200      	movs	r2, #0
 8007e46:	4912      	ldr	r1, [pc, #72]	@ (8007e90 <MX_USB_DEVICE_Init+0x50>)
 8007e48:	4812      	ldr	r0, [pc, #72]	@ (8007e94 <MX_USB_DEVICE_Init+0x54>)
 8007e4a:	f7fe fcf7 	bl	800683c <USBD_Init>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e54:	f7f8 ff66 	bl	8000d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e58:	490f      	ldr	r1, [pc, #60]	@ (8007e98 <MX_USB_DEVICE_Init+0x58>)
 8007e5a:	480e      	ldr	r0, [pc, #56]	@ (8007e94 <MX_USB_DEVICE_Init+0x54>)
 8007e5c:	f7fe fd1e 	bl	800689c <USBD_RegisterClass>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e66:	f7f8 ff5d 	bl	8000d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e6a:	490c      	ldr	r1, [pc, #48]	@ (8007e9c <MX_USB_DEVICE_Init+0x5c>)
 8007e6c:	4809      	ldr	r0, [pc, #36]	@ (8007e94 <MX_USB_DEVICE_Init+0x54>)
 8007e6e:	f7fe fc15 	bl	800669c <USBD_CDC_RegisterInterface>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e78:	f7f8 ff54 	bl	8000d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e7c:	4805      	ldr	r0, [pc, #20]	@ (8007e94 <MX_USB_DEVICE_Init+0x54>)
 8007e7e:	f7fe fd43 	bl	8006908 <USBD_Start>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e88:	f7f8 ff4c 	bl	8000d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e8c:	bf00      	nop
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200000b4 	.word	0x200000b4
 8007e94:	2000072c 	.word	0x2000072c
 8007e98:	20000020 	.word	0x20000020
 8007e9c:	200000a0 	.word	0x200000a0

08007ea0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4905      	ldr	r1, [pc, #20]	@ (8007ebc <CDC_Init_FS+0x1c>)
 8007ea8:	4805      	ldr	r0, [pc, #20]	@ (8007ec0 <CDC_Init_FS+0x20>)
 8007eaa:	f7fe fc11 	bl	80066d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eae:	4905      	ldr	r1, [pc, #20]	@ (8007ec4 <CDC_Init_FS+0x24>)
 8007eb0:	4803      	ldr	r0, [pc, #12]	@ (8007ec0 <CDC_Init_FS+0x20>)
 8007eb2:	f7fe fc2f 	bl	8006714 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20001208 	.word	0x20001208
 8007ec0:	2000072c 	.word	0x2000072c
 8007ec4:	20000a08 	.word	0x20000a08

08007ec8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ecc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2b23      	cmp	r3, #35	@ 0x23
 8007eec:	d84a      	bhi.n	8007f84 <CDC_Control_FS+0xac>
 8007eee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef4 <CDC_Control_FS+0x1c>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f85 	.word	0x08007f85
 8007ef8:	08007f85 	.word	0x08007f85
 8007efc:	08007f85 	.word	0x08007f85
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	08007f85 	.word	0x08007f85
 8007f08:	08007f85 	.word	0x08007f85
 8007f0c:	08007f85 	.word	0x08007f85
 8007f10:	08007f85 	.word	0x08007f85
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f85 	.word	0x08007f85
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	08007f85 	.word	0x08007f85
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f85 	.word	0x08007f85
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f85 	.word	0x08007f85
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f85 	.word	0x08007f85
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	08007f85 	.word	0x08007f85
 8007f70:	08007f85 	.word	0x08007f85
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f85 	.word	0x08007f85
 8007f7c:	08007f85 	.word	0x08007f85
 8007f80:	08007f85 	.word	0x08007f85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f84:	bf00      	nop
  }

  return (USBD_OK);
 8007f86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4805      	ldr	r0, [pc, #20]	@ (8007fb8 <CDC_Receive_FS+0x24>)
 8007fa2:	f7fe fbb7 	bl	8006714 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fa6:	4804      	ldr	r0, [pc, #16]	@ (8007fb8 <CDC_Receive_FS+0x24>)
 8007fa8:	f7fe fc12 	bl	80067d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000072c 	.word	0x2000072c

08007fbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <CDC_Transmit_FS+0x48>)
 8007fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e00b      	b.n	8007ffa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fe2:	887b      	ldrh	r3, [r7, #2]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4806      	ldr	r0, [pc, #24]	@ (8008004 <CDC_Transmit_FS+0x48>)
 8007fea:	f7fe fb71 	bl	80066d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fee:	4805      	ldr	r0, [pc, #20]	@ (8008004 <CDC_Transmit_FS+0x48>)
 8007ff0:	f7fe fbae 	bl	8006750 <USBD_CDC_TransmitPacket>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	2000072c 	.word	0x2000072c

08008008 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800801a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2212      	movs	r2, #18
 800803c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800803e:	4b03      	ldr	r3, [pc, #12]	@ (800804c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	200000d0 	.word	0x200000d0

08008050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2204      	movs	r2, #4
 8008060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008062:	4b03      	ldr	r3, [pc, #12]	@ (8008070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	200000e4 	.word	0x200000e4

08008074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4907      	ldr	r1, [pc, #28]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800808a:	4808      	ldr	r0, [pc, #32]	@ (80080ac <USBD_FS_ProductStrDescriptor+0x38>)
 800808c:	f7ff fdec 	bl	8007c68 <USBD_GetString>
 8008090:	e004      	b.n	800809c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4904      	ldr	r1, [pc, #16]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008096:	4805      	ldr	r0, [pc, #20]	@ (80080ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008098:	f7ff fde6 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800809c:	4b02      	ldr	r3, [pc, #8]	@ (80080a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20001a08 	.word	0x20001a08
 80080ac:	080091e8 	.word	0x080091e8

080080b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080c0:	4804      	ldr	r0, [pc, #16]	@ (80080d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080c2:	f7ff fdd1 	bl	8007c68 <USBD_GetString>
  return USBD_StrDesc;
 80080c6:	4b02      	ldr	r3, [pc, #8]	@ (80080d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20001a08 	.word	0x20001a08
 80080d4:	08009200 	.word	0x08009200

080080d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	221a      	movs	r2, #26
 80080e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080ea:	f000 f843 	bl	8008174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080ee:	4b02      	ldr	r3, [pc, #8]	@ (80080f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	200000e8 	.word	0x200000e8

080080fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4907      	ldr	r1, [pc, #28]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008112:	4808      	ldr	r0, [pc, #32]	@ (8008134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008114:	f7ff fda8 	bl	8007c68 <USBD_GetString>
 8008118:	e004      	b.n	8008124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800811e:	4805      	ldr	r0, [pc, #20]	@ (8008134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008120:	f7ff fda2 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008124:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20001a08 	.word	0x20001a08
 8008134:	08009214 	.word	0x08009214

08008138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4907      	ldr	r1, [pc, #28]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800814e:	4808      	ldr	r0, [pc, #32]	@ (8008170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008150:	f7ff fd8a 	bl	8007c68 <USBD_GetString>
 8008154:	e004      	b.n	8008160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4904      	ldr	r1, [pc, #16]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800815a:	4805      	ldr	r0, [pc, #20]	@ (8008170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800815c:	f7ff fd84 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20001a08 	.word	0x20001a08
 8008170:	08009220 	.word	0x08009220

08008174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800817a:	4b0f      	ldr	r3, [pc, #60]	@ (80081b8 <Get_SerialNum+0x44>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <Get_SerialNum+0x48>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008186:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <Get_SerialNum+0x4c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800819a:	2208      	movs	r2, #8
 800819c:	4909      	ldr	r1, [pc, #36]	@ (80081c4 <Get_SerialNum+0x50>)
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f814 	bl	80081cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081a4:	2204      	movs	r2, #4
 80081a6:	4908      	ldr	r1, [pc, #32]	@ (80081c8 <Get_SerialNum+0x54>)
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f000 f80f 	bl	80081cc <IntToUnicode>
  }
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	1fff7a10 	.word	0x1fff7a10
 80081bc:	1fff7a14 	.word	0x1fff7a14
 80081c0:	1fff7a18 	.word	0x1fff7a18
 80081c4:	200000ea 	.word	0x200000ea
 80081c8:	200000fa 	.word	0x200000fa

080081cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
 80081e2:	e027      	b.n	8008234 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0f1b      	lsrs	r3, r3, #28
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d80b      	bhi.n	8008204 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	0f1b      	lsrs	r3, r3, #28
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4619      	mov	r1, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	440b      	add	r3, r1
 80081fc:	3230      	adds	r2, #48	@ 0x30
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e00a      	b.n	800821a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0f1b      	lsrs	r3, r3, #28
 8008208:	b2da      	uxtb	r2, r3
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	4619      	mov	r1, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	440b      	add	r3, r1
 8008214:	3237      	adds	r2, #55	@ 0x37
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	3301      	adds	r3, #1
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	3301      	adds	r3, #1
 8008232:	75fb      	strb	r3, [r7, #23]
 8008234:	7dfa      	ldrb	r2, [r7, #23]
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	429a      	cmp	r2, r3
 800823a:	d3d3      	bcc.n	80081e4 <IntToUnicode+0x18>
  }
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
	...

0800824c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	60da      	str	r2, [r3, #12]
 8008262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800826c:	d13a      	bne.n	80082e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	4b1e      	ldr	r3, [pc, #120]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	4a1d      	ldr	r2, [pc, #116]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008278:	f043 0301 	orr.w	r3, r3, #1
 800827c:	6313      	str	r3, [r2, #48]	@ 0x30
 800827e:	4b1b      	ldr	r3, [pc, #108]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800828a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800828e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008290:	2302      	movs	r3, #2
 8008292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008298:	2303      	movs	r3, #3
 800829a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800829c:	230a      	movs	r3, #10
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4619      	mov	r1, r3
 80082a6:	4812      	ldr	r0, [pc, #72]	@ (80082f0 <HAL_PCD_MspInit+0xa4>)
 80082a8:	f7f9 fab0 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ac:	4b0f      	ldr	r3, [pc, #60]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b0:	4a0e      	ldr	r2, [pc, #56]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c0:	4a0a      	ldr	r2, [pc, #40]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80082c8:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <HAL_PCD_MspInit+0xa0>)
 80082ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	2043      	movs	r0, #67	@ 0x43
 80082da:	f7f9 fa60 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082de:	2043      	movs	r0, #67	@ 0x43
 80082e0:	f7f9 fa79 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082e4:	bf00      	nop
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40020000 	.word	0x40020000

080082f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fb49 	bl	80069a2 <USBD_LL_SetupStage>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	4619      	mov	r1, r3
 8008342:	f7fe fb83 	bl	8006a4c <USBD_LL_DataOutStage>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	3320      	adds	r3, #32
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	4619      	mov	r1, r3
 8008376:	f7fe fc1c 	bl	8006bb2 <USBD_LL_DataInStage>
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fd56 	bl	8006e42 <USBD_LL_SOF>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	79db      	ldrb	r3, [r3, #7]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d001      	beq.n	80083b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083b2:	f7f8 fcb7 	bl	8000d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083bc:	7bfa      	ldrb	r2, [r7, #15]
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fcfa 	bl	8006dba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fca2 	bl	8006d16 <USBD_LL_Reset>
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fcf5 	bl	8006dda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7adb      	ldrb	r3, [r3, #11]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <HAL_PCD_SuspendCallback+0x48>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	4a03      	ldr	r2, [pc, #12]	@ (8008424 <HAL_PCD_SuspendCallback+0x48>)
 8008416:	f043 0306 	orr.w	r3, r3, #6
 800841a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fceb 	bl	8006e12 <USBD_LL_Resume>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fd43 	bl	8006ee6 <USBD_LL_IsoOUTIncomplete>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fcff 	bl	8006e82 <USBD_LL_IsoINIncomplete>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fd55 	bl	8006f4a <USBD_LL_DevConnected>
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fd52 	bl	8006f60 <USBD_LL_DevDisconnected>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d13c      	bne.n	800854e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084d4:	4a20      	ldr	r2, [pc, #128]	@ (8008558 <USBD_LL_Init+0x94>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a1e      	ldr	r2, [pc, #120]	@ (8008558 <USBD_LL_Init+0x94>)
 80084e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008558 <USBD_LL_Init+0x94>)
 80084e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008558 <USBD_LL_Init+0x94>)
 80084ee:	2204      	movs	r2, #4
 80084f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084f2:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <USBD_LL_Init+0x94>)
 80084f4:	2202      	movs	r2, #2
 80084f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084f8:	4b17      	ldr	r3, [pc, #92]	@ (8008558 <USBD_LL_Init+0x94>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084fe:	4b16      	ldr	r3, [pc, #88]	@ (8008558 <USBD_LL_Init+0x94>)
 8008500:	2202      	movs	r2, #2
 8008502:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008504:	4b14      	ldr	r3, [pc, #80]	@ (8008558 <USBD_LL_Init+0x94>)
 8008506:	2200      	movs	r2, #0
 8008508:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800850a:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <USBD_LL_Init+0x94>)
 800850c:	2200      	movs	r2, #0
 800850e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008510:	4b11      	ldr	r3, [pc, #68]	@ (8008558 <USBD_LL_Init+0x94>)
 8008512:	2200      	movs	r2, #0
 8008514:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008516:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <USBD_LL_Init+0x94>)
 8008518:	2200      	movs	r2, #0
 800851a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800851c:	4b0e      	ldr	r3, [pc, #56]	@ (8008558 <USBD_LL_Init+0x94>)
 800851e:	2200      	movs	r2, #0
 8008520:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008522:	480d      	ldr	r0, [pc, #52]	@ (8008558 <USBD_LL_Init+0x94>)
 8008524:	f7f9 ffd5 	bl	80024d2 <HAL_PCD_Init>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800852e:	f7f8 fbf9 	bl	8000d24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008532:	2180      	movs	r1, #128	@ 0x80
 8008534:	4808      	ldr	r0, [pc, #32]	@ (8008558 <USBD_LL_Init+0x94>)
 8008536:	f7fb fa02 	bl	800393e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800853a:	2240      	movs	r2, #64	@ 0x40
 800853c:	2100      	movs	r1, #0
 800853e:	4806      	ldr	r0, [pc, #24]	@ (8008558 <USBD_LL_Init+0x94>)
 8008540:	f7fb f9b6 	bl	80038b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008544:	2280      	movs	r2, #128	@ 0x80
 8008546:	2101      	movs	r1, #1
 8008548:	4803      	ldr	r0, [pc, #12]	@ (8008558 <USBD_LL_Init+0x94>)
 800854a:	f7fb f9b1 	bl	80038b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20001c08 	.word	0x20001c08

0800855c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008572:	4618      	mov	r0, r3
 8008574:	f7fa f8bc 	bl	80026f0 <HAL_PCD_Start>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f942 	bl	8008808 <USBD_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008588:	7bbb      	ldrb	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	461a      	mov	r2, r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	70fb      	strb	r3, [r7, #3]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70bb      	strb	r3, [r7, #2]
 80085a8:	4613      	mov	r3, r2
 80085aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ba:	78bb      	ldrb	r3, [r7, #2]
 80085bc:	883a      	ldrh	r2, [r7, #0]
 80085be:	78f9      	ldrb	r1, [r7, #3]
 80085c0:	f7fa fd90 	bl	80030e4 <HAL_PCD_EP_Open>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f91c 	bl	8008808 <USBD_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fa fddb 	bl	80031b8 <HAL_PCD_EP_Close>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f8fd 	bl	8008808 <USBD_Get_USB_Status>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008612:	7bbb      	ldrb	r3, [r7, #14]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7fa fe93 	bl	8003366 <HAL_PCD_EP_SetStall>
 8008640:	4603      	mov	r3, r0
 8008642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f8de 	bl	8008808 <USBD_Get_USB_Status>
 800864c:	4603      	mov	r3, r0
 800864e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008650:	7bbb      	ldrb	r3, [r7, #14]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	4611      	mov	r1, r2
 8008678:	4618      	mov	r0, r3
 800867a:	f7fa fed7 	bl	800342c <HAL_PCD_EP_ClrStall>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f8bf 	bl	8008808 <USBD_Get_USB_Status>
 800868a:	4603      	mov	r3, r0
 800868c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da0b      	bge.n	80086cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	4613      	mov	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	3316      	adds	r3, #22
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	e00b      	b.n	80086e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80086e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	4611      	mov	r1, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7fa fcc4 	bl	800309c <HAL_PCD_SetAddress>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f874 	bl	8008808 <USBD_Get_USB_Status>
 8008720:	4603      	mov	r3, r0
 8008722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008724:	7bbb      	ldrb	r3, [r7, #14]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	460b      	mov	r3, r1
 800873c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800874c:	7af9      	ldrb	r1, [r7, #11]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	f7fa fdce 	bl	80032f2 <HAL_PCD_EP_Transmit>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f853 	bl	8008808 <USBD_Get_USB_Status>
 8008762:	4603      	mov	r3, r0
 8008764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008766:	7dbb      	ldrb	r3, [r7, #22]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	460b      	mov	r3, r1
 800877e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800878e:	7af9      	ldrb	r1, [r7, #11]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	f7fa fd5a 	bl	800324c <HAL_PCD_EP_Receive>
 8008798:	4603      	mov	r3, r0
 800879a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f832 	bl	8008808 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fa fd7a 	bl	80032c2 <HAL_PCD_EP_GetRxCount>
 80087ce:	4603      	mov	r3, r0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087e0:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <USBD_static_malloc+0x18>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200020ec 	.word	0x200020ec

080087f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d817      	bhi.n	800884c <USBD_Get_USB_Status+0x44>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <USBD_Get_USB_Status+0x1c>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	0800883b 	.word	0x0800883b
 800882c:	08008841 	.word	0x08008841
 8008830:	08008847 	.word	0x08008847
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	e00b      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	73fb      	strb	r3, [r7, #15]
    break;
 800883e:	e008      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
    break;
 8008844:	e005      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	73fb      	strb	r3, [r7, #15]
    break;
 800884a:	e002      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	bf00      	nop
  }
  return usb_status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <siprintf>:
 8008860:	b40e      	push	{r1, r2, r3}
 8008862:	b500      	push	{lr}
 8008864:	b09c      	sub	sp, #112	@ 0x70
 8008866:	ab1d      	add	r3, sp, #116	@ 0x74
 8008868:	9002      	str	r0, [sp, #8]
 800886a:	9006      	str	r0, [sp, #24]
 800886c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008870:	4809      	ldr	r0, [pc, #36]	@ (8008898 <siprintf+0x38>)
 8008872:	9107      	str	r1, [sp, #28]
 8008874:	9104      	str	r1, [sp, #16]
 8008876:	4909      	ldr	r1, [pc, #36]	@ (800889c <siprintf+0x3c>)
 8008878:	f853 2b04 	ldr.w	r2, [r3], #4
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	a902      	add	r1, sp, #8
 8008884:	f000 f9bc 	bl	8008c00 <_svfiprintf_r>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	b01c      	add	sp, #112	@ 0x70
 8008890:	f85d eb04 	ldr.w	lr, [sp], #4
 8008894:	b003      	add	sp, #12
 8008896:	4770      	bx	lr
 8008898:	20000104 	.word	0x20000104
 800889c:	ffff0208 	.word	0xffff0208

080088a0 <memmove>:
 80088a0:	4288      	cmp	r0, r1
 80088a2:	b510      	push	{r4, lr}
 80088a4:	eb01 0402 	add.w	r4, r1, r2
 80088a8:	d902      	bls.n	80088b0 <memmove+0x10>
 80088aa:	4284      	cmp	r4, r0
 80088ac:	4623      	mov	r3, r4
 80088ae:	d807      	bhi.n	80088c0 <memmove+0x20>
 80088b0:	1e43      	subs	r3, r0, #1
 80088b2:	42a1      	cmp	r1, r4
 80088b4:	d008      	beq.n	80088c8 <memmove+0x28>
 80088b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088be:	e7f8      	b.n	80088b2 <memmove+0x12>
 80088c0:	4402      	add	r2, r0
 80088c2:	4601      	mov	r1, r0
 80088c4:	428a      	cmp	r2, r1
 80088c6:	d100      	bne.n	80088ca <memmove+0x2a>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088d2:	e7f7      	b.n	80088c4 <memmove+0x24>

080088d4 <memset>:
 80088d4:	4402      	add	r2, r0
 80088d6:	4603      	mov	r3, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <__errno>:
 80088e4:	4b01      	ldr	r3, [pc, #4]	@ (80088ec <__errno+0x8>)
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20000104 	.word	0x20000104

080088f0 <__libc_init_array>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008928 <__libc_init_array+0x38>)
 80088f4:	4c0d      	ldr	r4, [pc, #52]	@ (800892c <__libc_init_array+0x3c>)
 80088f6:	1b64      	subs	r4, r4, r5
 80088f8:	10a4      	asrs	r4, r4, #2
 80088fa:	2600      	movs	r6, #0
 80088fc:	42a6      	cmp	r6, r4
 80088fe:	d109      	bne.n	8008914 <__libc_init_array+0x24>
 8008900:	4d0b      	ldr	r5, [pc, #44]	@ (8008930 <__libc_init_array+0x40>)
 8008902:	4c0c      	ldr	r4, [pc, #48]	@ (8008934 <__libc_init_array+0x44>)
 8008904:	f000 fc4c 	bl	80091a0 <_init>
 8008908:	1b64      	subs	r4, r4, r5
 800890a:	10a4      	asrs	r4, r4, #2
 800890c:	2600      	movs	r6, #0
 800890e:	42a6      	cmp	r6, r4
 8008910:	d105      	bne.n	800891e <__libc_init_array+0x2e>
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	f855 3b04 	ldr.w	r3, [r5], #4
 8008918:	4798      	blx	r3
 800891a:	3601      	adds	r6, #1
 800891c:	e7ee      	b.n	80088fc <__libc_init_array+0xc>
 800891e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008922:	4798      	blx	r3
 8008924:	3601      	adds	r6, #1
 8008926:	e7f2      	b.n	800890e <__libc_init_array+0x1e>
 8008928:	08009fec 	.word	0x08009fec
 800892c:	08009fec 	.word	0x08009fec
 8008930:	08009fec 	.word	0x08009fec
 8008934:	08009ff0 	.word	0x08009ff0

08008938 <__retarget_lock_acquire_recursive>:
 8008938:	4770      	bx	lr

0800893a <__retarget_lock_release_recursive>:
 800893a:	4770      	bx	lr

0800893c <memcpy>:
 800893c:	440a      	add	r2, r1
 800893e:	4291      	cmp	r1, r2
 8008940:	f100 33ff 	add.w	r3, r0, #4294967295
 8008944:	d100      	bne.n	8008948 <memcpy+0xc>
 8008946:	4770      	bx	lr
 8008948:	b510      	push	{r4, lr}
 800894a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800894e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008952:	4291      	cmp	r1, r2
 8008954:	d1f9      	bne.n	800894a <memcpy+0xe>
 8008956:	bd10      	pop	{r4, pc}

08008958 <_free_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4605      	mov	r5, r0
 800895c:	2900      	cmp	r1, #0
 800895e:	d041      	beq.n	80089e4 <_free_r+0x8c>
 8008960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008964:	1f0c      	subs	r4, r1, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfb8      	it	lt
 800896a:	18e4      	addlt	r4, r4, r3
 800896c:	f000 f8e0 	bl	8008b30 <__malloc_lock>
 8008970:	4a1d      	ldr	r2, [pc, #116]	@ (80089e8 <_free_r+0x90>)
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	b933      	cbnz	r3, 8008984 <_free_r+0x2c>
 8008976:	6063      	str	r3, [r4, #4]
 8008978:	6014      	str	r4, [r2, #0]
 800897a:	4628      	mov	r0, r5
 800897c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008980:	f000 b8dc 	b.w	8008b3c <__malloc_unlock>
 8008984:	42a3      	cmp	r3, r4
 8008986:	d908      	bls.n	800899a <_free_r+0x42>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	1821      	adds	r1, r4, r0
 800898c:	428b      	cmp	r3, r1
 800898e:	bf01      	itttt	eq
 8008990:	6819      	ldreq	r1, [r3, #0]
 8008992:	685b      	ldreq	r3, [r3, #4]
 8008994:	1809      	addeq	r1, r1, r0
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	e7ed      	b.n	8008976 <_free_r+0x1e>
 800899a:	461a      	mov	r2, r3
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b10b      	cbz	r3, 80089a4 <_free_r+0x4c>
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	d9fa      	bls.n	800899a <_free_r+0x42>
 80089a4:	6811      	ldr	r1, [r2, #0]
 80089a6:	1850      	adds	r0, r2, r1
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d10b      	bne.n	80089c4 <_free_r+0x6c>
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	4401      	add	r1, r0
 80089b0:	1850      	adds	r0, r2, r1
 80089b2:	4283      	cmp	r3, r0
 80089b4:	6011      	str	r1, [r2, #0]
 80089b6:	d1e0      	bne.n	800897a <_free_r+0x22>
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	6053      	str	r3, [r2, #4]
 80089be:	4408      	add	r0, r1
 80089c0:	6010      	str	r0, [r2, #0]
 80089c2:	e7da      	b.n	800897a <_free_r+0x22>
 80089c4:	d902      	bls.n	80089cc <_free_r+0x74>
 80089c6:	230c      	movs	r3, #12
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	e7d6      	b.n	800897a <_free_r+0x22>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	1821      	adds	r1, r4, r0
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf04      	itt	eq
 80089d4:	6819      	ldreq	r1, [r3, #0]
 80089d6:	685b      	ldreq	r3, [r3, #4]
 80089d8:	6063      	str	r3, [r4, #4]
 80089da:	bf04      	itt	eq
 80089dc:	1809      	addeq	r1, r1, r0
 80089de:	6021      	streq	r1, [r4, #0]
 80089e0:	6054      	str	r4, [r2, #4]
 80089e2:	e7ca      	b.n	800897a <_free_r+0x22>
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	bf00      	nop
 80089e8:	20002450 	.word	0x20002450

080089ec <sbrk_aligned>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4e0f      	ldr	r6, [pc, #60]	@ (8008a2c <sbrk_aligned+0x40>)
 80089f0:	460c      	mov	r4, r1
 80089f2:	6831      	ldr	r1, [r6, #0]
 80089f4:	4605      	mov	r5, r0
 80089f6:	b911      	cbnz	r1, 80089fe <sbrk_aligned+0x12>
 80089f8:	f000 fb8c 	bl	8009114 <_sbrk_r>
 80089fc:	6030      	str	r0, [r6, #0]
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 fb87 	bl	8009114 <_sbrk_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d103      	bne.n	8008a12 <sbrk_aligned+0x26>
 8008a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a0e:	4620      	mov	r0, r4
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d0f8      	beq.n	8008a0e <sbrk_aligned+0x22>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fb78 	bl	8009114 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d1f2      	bne.n	8008a0e <sbrk_aligned+0x22>
 8008a28:	e7ef      	b.n	8008a0a <sbrk_aligned+0x1e>
 8008a2a:	bf00      	nop
 8008a2c:	2000244c 	.word	0x2000244c

08008a30 <_malloc_r>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	1ccd      	adds	r5, r1, #3
 8008a36:	f025 0503 	bic.w	r5, r5, #3
 8008a3a:	3508      	adds	r5, #8
 8008a3c:	2d0c      	cmp	r5, #12
 8008a3e:	bf38      	it	cc
 8008a40:	250c      	movcc	r5, #12
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	4606      	mov	r6, r0
 8008a46:	db01      	blt.n	8008a4c <_malloc_r+0x1c>
 8008a48:	42a9      	cmp	r1, r5
 8008a4a:	d904      	bls.n	8008a56 <_malloc_r+0x26>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	6033      	str	r3, [r6, #0]
 8008a50:	2000      	movs	r0, #0
 8008a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b2c <_malloc_r+0xfc>
 8008a5a:	f000 f869 	bl	8008b30 <__malloc_lock>
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	461c      	mov	r4, r3
 8008a64:	bb44      	cbnz	r4, 8008ab8 <_malloc_r+0x88>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff ffbf 	bl	80089ec <sbrk_aligned>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	4604      	mov	r4, r0
 8008a72:	d158      	bne.n	8008b26 <_malloc_r+0xf6>
 8008a74:	f8d8 4000 	ldr.w	r4, [r8]
 8008a78:	4627      	mov	r7, r4
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	d143      	bne.n	8008b06 <_malloc_r+0xd6>
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d04b      	beq.n	8008b1a <_malloc_r+0xea>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	4639      	mov	r1, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	eb04 0903 	add.w	r9, r4, r3
 8008a8c:	f000 fb42 	bl	8009114 <_sbrk_r>
 8008a90:	4581      	cmp	r9, r0
 8008a92:	d142      	bne.n	8008b1a <_malloc_r+0xea>
 8008a94:	6821      	ldr	r1, [r4, #0]
 8008a96:	1a6d      	subs	r5, r5, r1
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ffa6 	bl	80089ec <sbrk_aligned>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d03a      	beq.n	8008b1a <_malloc_r+0xea>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	442b      	add	r3, r5
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	bb62      	cbnz	r2, 8008b0c <_malloc_r+0xdc>
 8008ab2:	f8c8 7000 	str.w	r7, [r8]
 8008ab6:	e00f      	b.n	8008ad8 <_malloc_r+0xa8>
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	1b52      	subs	r2, r2, r5
 8008abc:	d420      	bmi.n	8008b00 <_malloc_r+0xd0>
 8008abe:	2a0b      	cmp	r2, #11
 8008ac0:	d917      	bls.n	8008af2 <_malloc_r+0xc2>
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	6025      	str	r5, [r4, #0]
 8008ac8:	bf18      	it	ne
 8008aca:	6059      	strne	r1, [r3, #4]
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	bf08      	it	eq
 8008ad0:	f8c8 1000 	streq.w	r1, [r8]
 8008ad4:	5162      	str	r2, [r4, r5]
 8008ad6:	604b      	str	r3, [r1, #4]
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 f82f 	bl	8008b3c <__malloc_unlock>
 8008ade:	f104 000b 	add.w	r0, r4, #11
 8008ae2:	1d23      	adds	r3, r4, #4
 8008ae4:	f020 0007 	bic.w	r0, r0, #7
 8008ae8:	1ac2      	subs	r2, r0, r3
 8008aea:	bf1c      	itt	ne
 8008aec:	1a1b      	subne	r3, r3, r0
 8008aee:	50a3      	strne	r3, [r4, r2]
 8008af0:	e7af      	b.n	8008a52 <_malloc_r+0x22>
 8008af2:	6862      	ldr	r2, [r4, #4]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	bf0c      	ite	eq
 8008af8:	f8c8 2000 	streq.w	r2, [r8]
 8008afc:	605a      	strne	r2, [r3, #4]
 8008afe:	e7eb      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b00:	4623      	mov	r3, r4
 8008b02:	6864      	ldr	r4, [r4, #4]
 8008b04:	e7ae      	b.n	8008a64 <_malloc_r+0x34>
 8008b06:	463c      	mov	r4, r7
 8008b08:	687f      	ldr	r7, [r7, #4]
 8008b0a:	e7b6      	b.n	8008a7a <_malloc_r+0x4a>
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d1fb      	bne.n	8008b0c <_malloc_r+0xdc>
 8008b14:	2300      	movs	r3, #0
 8008b16:	6053      	str	r3, [r2, #4]
 8008b18:	e7de      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f000 f80c 	bl	8008b3c <__malloc_unlock>
 8008b24:	e794      	b.n	8008a50 <_malloc_r+0x20>
 8008b26:	6005      	str	r5, [r0, #0]
 8008b28:	e7d6      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b2a:	bf00      	nop
 8008b2c:	20002450 	.word	0x20002450

08008b30 <__malloc_lock>:
 8008b30:	4801      	ldr	r0, [pc, #4]	@ (8008b38 <__malloc_lock+0x8>)
 8008b32:	f7ff bf01 	b.w	8008938 <__retarget_lock_acquire_recursive>
 8008b36:	bf00      	nop
 8008b38:	20002448 	.word	0x20002448

08008b3c <__malloc_unlock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__malloc_unlock+0x8>)
 8008b3e:	f7ff befc 	b.w	800893a <__retarget_lock_release_recursive>
 8008b42:	bf00      	nop
 8008b44:	20002448 	.word	0x20002448

08008b48 <__ssputs_r>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	688e      	ldr	r6, [r1, #8]
 8008b4e:	461f      	mov	r7, r3
 8008b50:	42be      	cmp	r6, r7
 8008b52:	680b      	ldr	r3, [r1, #0]
 8008b54:	4682      	mov	sl, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	4690      	mov	r8, r2
 8008b5a:	d82d      	bhi.n	8008bb8 <__ssputs_r+0x70>
 8008b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b64:	d026      	beq.n	8008bb4 <__ssputs_r+0x6c>
 8008b66:	6965      	ldr	r5, [r4, #20]
 8008b68:	6909      	ldr	r1, [r1, #16]
 8008b6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b6e:	eba3 0901 	sub.w	r9, r3, r1
 8008b72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b76:	1c7b      	adds	r3, r7, #1
 8008b78:	444b      	add	r3, r9
 8008b7a:	106d      	asrs	r5, r5, #1
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	bf38      	it	cc
 8008b80:	461d      	movcc	r5, r3
 8008b82:	0553      	lsls	r3, r2, #21
 8008b84:	d527      	bpl.n	8008bd6 <__ssputs_r+0x8e>
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7ff ff52 	bl	8008a30 <_malloc_r>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	b360      	cbz	r0, 8008bea <__ssputs_r+0xa2>
 8008b90:	6921      	ldr	r1, [r4, #16]
 8008b92:	464a      	mov	r2, r9
 8008b94:	f7ff fed2 	bl	800893c <memcpy>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	6126      	str	r6, [r4, #16]
 8008ba6:	6165      	str	r5, [r4, #20]
 8008ba8:	444e      	add	r6, r9
 8008baa:	eba5 0509 	sub.w	r5, r5, r9
 8008bae:	6026      	str	r6, [r4, #0]
 8008bb0:	60a5      	str	r5, [r4, #8]
 8008bb2:	463e      	mov	r6, r7
 8008bb4:	42be      	cmp	r6, r7
 8008bb6:	d900      	bls.n	8008bba <__ssputs_r+0x72>
 8008bb8:	463e      	mov	r6, r7
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	f7ff fe6e 	bl	80088a0 <memmove>
 8008bc4:	68a3      	ldr	r3, [r4, #8]
 8008bc6:	1b9b      	subs	r3, r3, r6
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	4433      	add	r3, r6
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	f000 faac 	bl	8009134 <_realloc_r>
 8008bdc:	4606      	mov	r6, r0
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d1e0      	bne.n	8008ba4 <__ssputs_r+0x5c>
 8008be2:	6921      	ldr	r1, [r4, #16]
 8008be4:	4650      	mov	r0, sl
 8008be6:	f7ff feb7 	bl	8008958 <_free_r>
 8008bea:	230c      	movs	r3, #12
 8008bec:	f8ca 3000 	str.w	r3, [sl]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	e7e9      	b.n	8008bd2 <__ssputs_r+0x8a>
	...

08008c00 <_svfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4698      	mov	r8, r3
 8008c06:	898b      	ldrh	r3, [r1, #12]
 8008c08:	061b      	lsls	r3, r3, #24
 8008c0a:	b09d      	sub	sp, #116	@ 0x74
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	d510      	bpl.n	8008c36 <_svfiprintf_r+0x36>
 8008c14:	690b      	ldr	r3, [r1, #16]
 8008c16:	b973      	cbnz	r3, 8008c36 <_svfiprintf_r+0x36>
 8008c18:	2140      	movs	r1, #64	@ 0x40
 8008c1a:	f7ff ff09 	bl	8008a30 <_malloc_r>
 8008c1e:	6028      	str	r0, [r5, #0]
 8008c20:	6128      	str	r0, [r5, #16]
 8008c22:	b930      	cbnz	r0, 8008c32 <_svfiprintf_r+0x32>
 8008c24:	230c      	movs	r3, #12
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	b01d      	add	sp, #116	@ 0x74
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	2340      	movs	r3, #64	@ 0x40
 8008c34:	616b      	str	r3, [r5, #20]
 8008c36:	2300      	movs	r3, #0
 8008c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c3a:	2320      	movs	r3, #32
 8008c3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c44:	2330      	movs	r3, #48	@ 0x30
 8008c46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008de4 <_svfiprintf_r+0x1e4>
 8008c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c4e:	f04f 0901 	mov.w	r9, #1
 8008c52:	4623      	mov	r3, r4
 8008c54:	469a      	mov	sl, r3
 8008c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c5a:	b10a      	cbz	r2, 8008c60 <_svfiprintf_r+0x60>
 8008c5c:	2a25      	cmp	r2, #37	@ 0x25
 8008c5e:	d1f9      	bne.n	8008c54 <_svfiprintf_r+0x54>
 8008c60:	ebba 0b04 	subs.w	fp, sl, r4
 8008c64:	d00b      	beq.n	8008c7e <_svfiprintf_r+0x7e>
 8008c66:	465b      	mov	r3, fp
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff ff6b 	bl	8008b48 <__ssputs_r>
 8008c72:	3001      	adds	r0, #1
 8008c74:	f000 80a7 	beq.w	8008dc6 <_svfiprintf_r+0x1c6>
 8008c78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c7a:	445a      	add	r2, fp
 8008c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 809f 	beq.w	8008dc6 <_svfiprintf_r+0x1c6>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c92:	f10a 0a01 	add.w	sl, sl, #1
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ca0:	4654      	mov	r4, sl
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca8:	484e      	ldr	r0, [pc, #312]	@ (8008de4 <_svfiprintf_r+0x1e4>)
 8008caa:	f7f7 faa1 	bl	80001f0 <memchr>
 8008cae:	9a04      	ldr	r2, [sp, #16]
 8008cb0:	b9d8      	cbnz	r0, 8008cea <_svfiprintf_r+0xea>
 8008cb2:	06d0      	lsls	r0, r2, #27
 8008cb4:	bf44      	itt	mi
 8008cb6:	2320      	movmi	r3, #32
 8008cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cbc:	0711      	lsls	r1, r2, #28
 8008cbe:	bf44      	itt	mi
 8008cc0:	232b      	movmi	r3, #43	@ 0x2b
 8008cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ccc:	d015      	beq.n	8008cfa <_svfiprintf_r+0xfa>
 8008cce:	9a07      	ldr	r2, [sp, #28]
 8008cd0:	4654      	mov	r4, sl
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f04f 0c0a 	mov.w	ip, #10
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cde:	3b30      	subs	r3, #48	@ 0x30
 8008ce0:	2b09      	cmp	r3, #9
 8008ce2:	d94b      	bls.n	8008d7c <_svfiprintf_r+0x17c>
 8008ce4:	b1b0      	cbz	r0, 8008d14 <_svfiprintf_r+0x114>
 8008ce6:	9207      	str	r2, [sp, #28]
 8008ce8:	e014      	b.n	8008d14 <_svfiprintf_r+0x114>
 8008cea:	eba0 0308 	sub.w	r3, r0, r8
 8008cee:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	46a2      	mov	sl, r4
 8008cf8:	e7d2      	b.n	8008ca0 <_svfiprintf_r+0xa0>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	1d19      	adds	r1, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9103      	str	r1, [sp, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfbb      	ittet	lt
 8008d06:	425b      	neglt	r3, r3
 8008d08:	f042 0202 	orrlt.w	r2, r2, #2
 8008d0c:	9307      	strge	r3, [sp, #28]
 8008d0e:	9307      	strlt	r3, [sp, #28]
 8008d10:	bfb8      	it	lt
 8008d12:	9204      	strlt	r2, [sp, #16]
 8008d14:	7823      	ldrb	r3, [r4, #0]
 8008d16:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d18:	d10a      	bne.n	8008d30 <_svfiprintf_r+0x130>
 8008d1a:	7863      	ldrb	r3, [r4, #1]
 8008d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d1e:	d132      	bne.n	8008d86 <_svfiprintf_r+0x186>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	9203      	str	r2, [sp, #12]
 8008d28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d2c:	3402      	adds	r4, #2
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008df4 <_svfiprintf_r+0x1f4>
 8008d34:	7821      	ldrb	r1, [r4, #0]
 8008d36:	2203      	movs	r2, #3
 8008d38:	4650      	mov	r0, sl
 8008d3a:	f7f7 fa59 	bl	80001f0 <memchr>
 8008d3e:	b138      	cbz	r0, 8008d50 <_svfiprintf_r+0x150>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	eba0 000a 	sub.w	r0, r0, sl
 8008d46:	2240      	movs	r2, #64	@ 0x40
 8008d48:	4082      	lsls	r2, r0
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	4824      	ldr	r0, [pc, #144]	@ (8008de8 <_svfiprintf_r+0x1e8>)
 8008d56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	f7f7 fa48 	bl	80001f0 <memchr>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d036      	beq.n	8008dd2 <_svfiprintf_r+0x1d2>
 8008d64:	4b21      	ldr	r3, [pc, #132]	@ (8008dec <_svfiprintf_r+0x1ec>)
 8008d66:	bb1b      	cbnz	r3, 8008db0 <_svfiprintf_r+0x1b0>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	f023 0307 	bic.w	r3, r3, #7
 8008d70:	3308      	adds	r3, #8
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d76:	4433      	add	r3, r6
 8008d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7a:	e76a      	b.n	8008c52 <_svfiprintf_r+0x52>
 8008d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d80:	460c      	mov	r4, r1
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7a8      	b.n	8008cd8 <_svfiprintf_r+0xd8>
 8008d86:	2300      	movs	r3, #0
 8008d88:	3401      	adds	r4, #1
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f04f 0c0a 	mov.w	ip, #10
 8008d92:	4620      	mov	r0, r4
 8008d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d98:	3a30      	subs	r2, #48	@ 0x30
 8008d9a:	2a09      	cmp	r2, #9
 8008d9c:	d903      	bls.n	8008da6 <_svfiprintf_r+0x1a6>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0c6      	beq.n	8008d30 <_svfiprintf_r+0x130>
 8008da2:	9105      	str	r1, [sp, #20]
 8008da4:	e7c4      	b.n	8008d30 <_svfiprintf_r+0x130>
 8008da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008daa:	4604      	mov	r4, r0
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7f0      	b.n	8008d92 <_svfiprintf_r+0x192>
 8008db0:	ab03      	add	r3, sp, #12
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4b0e      	ldr	r3, [pc, #56]	@ (8008df0 <_svfiprintf_r+0x1f0>)
 8008db8:	a904      	add	r1, sp, #16
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	1c42      	adds	r2, r0, #1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	d1d6      	bne.n	8008d74 <_svfiprintf_r+0x174>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	065b      	lsls	r3, r3, #25
 8008dca:	f53f af2d 	bmi.w	8008c28 <_svfiprintf_r+0x28>
 8008dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dd0:	e72c      	b.n	8008c2c <_svfiprintf_r+0x2c>
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4b05      	ldr	r3, [pc, #20]	@ (8008df0 <_svfiprintf_r+0x1f0>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f000 f879 	bl	8008ed4 <_printf_i>
 8008de2:	e7ed      	b.n	8008dc0 <_svfiprintf_r+0x1c0>
 8008de4:	08009fb0 	.word	0x08009fb0
 8008de8:	08009fba 	.word	0x08009fba
 8008dec:	00000000 	.word	0x00000000
 8008df0:	08008b49 	.word	0x08008b49
 8008df4:	08009fb6 	.word	0x08009fb6

08008df8 <_printf_common>:
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	4698      	mov	r8, r3
 8008e00:	688a      	ldr	r2, [r1, #8]
 8008e02:	690b      	ldr	r3, [r1, #16]
 8008e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	bfb8      	it	lt
 8008e0c:	4613      	movlt	r3, r2
 8008e0e:	6033      	str	r3, [r6, #0]
 8008e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e14:	4607      	mov	r7, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	b10a      	cbz	r2, 8008e1e <_printf_common+0x26>
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	6033      	str	r3, [r6, #0]
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	0699      	lsls	r1, r3, #26
 8008e22:	bf42      	ittt	mi
 8008e24:	6833      	ldrmi	r3, [r6, #0]
 8008e26:	3302      	addmi	r3, #2
 8008e28:	6033      	strmi	r3, [r6, #0]
 8008e2a:	6825      	ldr	r5, [r4, #0]
 8008e2c:	f015 0506 	ands.w	r5, r5, #6
 8008e30:	d106      	bne.n	8008e40 <_printf_common+0x48>
 8008e32:	f104 0a19 	add.w	sl, r4, #25
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	6832      	ldr	r2, [r6, #0]
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dc26      	bgt.n	8008e8e <_printf_common+0x96>
 8008e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	3b00      	subs	r3, #0
 8008e48:	bf18      	it	ne
 8008e4a:	2301      	movne	r3, #1
 8008e4c:	0692      	lsls	r2, r2, #26
 8008e4e:	d42b      	bmi.n	8008ea8 <_printf_common+0xb0>
 8008e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e54:	4641      	mov	r1, r8
 8008e56:	4638      	mov	r0, r7
 8008e58:	47c8      	blx	r9
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d01e      	beq.n	8008e9c <_printf_common+0xa4>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6922      	ldr	r2, [r4, #16]
 8008e62:	f003 0306 	and.w	r3, r3, #6
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	bf02      	ittt	eq
 8008e6a:	68e5      	ldreq	r5, [r4, #12]
 8008e6c:	6833      	ldreq	r3, [r6, #0]
 8008e6e:	1aed      	subeq	r5, r5, r3
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	bf0c      	ite	eq
 8008e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e78:	2500      	movne	r5, #0
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	bfc4      	itt	gt
 8008e7e:	1a9b      	subgt	r3, r3, r2
 8008e80:	18ed      	addgt	r5, r5, r3
 8008e82:	2600      	movs	r6, #0
 8008e84:	341a      	adds	r4, #26
 8008e86:	42b5      	cmp	r5, r6
 8008e88:	d11a      	bne.n	8008ec0 <_printf_common+0xc8>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e008      	b.n	8008ea0 <_printf_common+0xa8>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4652      	mov	r2, sl
 8008e92:	4641      	mov	r1, r8
 8008e94:	4638      	mov	r0, r7
 8008e96:	47c8      	blx	r9
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d103      	bne.n	8008ea4 <_printf_common+0xac>
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea4:	3501      	adds	r5, #1
 8008ea6:	e7c6      	b.n	8008e36 <_printf_common+0x3e>
 8008ea8:	18e1      	adds	r1, r4, r3
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	2030      	movs	r0, #48	@ 0x30
 8008eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eb2:	4422      	add	r2, r4
 8008eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	e7c7      	b.n	8008e50 <_printf_common+0x58>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	47c8      	blx	r9
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d0e6      	beq.n	8008e9c <_printf_common+0xa4>
 8008ece:	3601      	adds	r6, #1
 8008ed0:	e7d9      	b.n	8008e86 <_printf_common+0x8e>
	...

08008ed4 <_printf_i>:
 8008ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	7e0f      	ldrb	r7, [r1, #24]
 8008eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008edc:	2f78      	cmp	r7, #120	@ 0x78
 8008ede:	4691      	mov	r9, r2
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	469a      	mov	sl, r3
 8008ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008eea:	d807      	bhi.n	8008efc <_printf_i+0x28>
 8008eec:	2f62      	cmp	r7, #98	@ 0x62
 8008eee:	d80a      	bhi.n	8008f06 <_printf_i+0x32>
 8008ef0:	2f00      	cmp	r7, #0
 8008ef2:	f000 80d2 	beq.w	800909a <_printf_i+0x1c6>
 8008ef6:	2f58      	cmp	r7, #88	@ 0x58
 8008ef8:	f000 80b9 	beq.w	800906e <_printf_i+0x19a>
 8008efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f04:	e03a      	b.n	8008f7c <_printf_i+0xa8>
 8008f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f0a:	2b15      	cmp	r3, #21
 8008f0c:	d8f6      	bhi.n	8008efc <_printf_i+0x28>
 8008f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008f14 <_printf_i+0x40>)
 8008f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f81 	.word	0x08008f81
 8008f1c:	08008efd 	.word	0x08008efd
 8008f20:	08008efd 	.word	0x08008efd
 8008f24:	08008efd 	.word	0x08008efd
 8008f28:	08008efd 	.word	0x08008efd
 8008f2c:	08008f81 	.word	0x08008f81
 8008f30:	08008efd 	.word	0x08008efd
 8008f34:	08008efd 	.word	0x08008efd
 8008f38:	08008efd 	.word	0x08008efd
 8008f3c:	08008efd 	.word	0x08008efd
 8008f40:	08009081 	.word	0x08009081
 8008f44:	08008fab 	.word	0x08008fab
 8008f48:	0800903b 	.word	0x0800903b
 8008f4c:	08008efd 	.word	0x08008efd
 8008f50:	08008efd 	.word	0x08008efd
 8008f54:	080090a3 	.word	0x080090a3
 8008f58:	08008efd 	.word	0x08008efd
 8008f5c:	08008fab 	.word	0x08008fab
 8008f60:	08008efd 	.word	0x08008efd
 8008f64:	08008efd 	.word	0x08008efd
 8008f68:	08009043 	.word	0x08009043
 8008f6c:	6833      	ldr	r3, [r6, #0]
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6032      	str	r2, [r6, #0]
 8008f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e09d      	b.n	80090bc <_printf_i+0x1e8>
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	6820      	ldr	r0, [r4, #0]
 8008f84:	1d19      	adds	r1, r3, #4
 8008f86:	6031      	str	r1, [r6, #0]
 8008f88:	0606      	lsls	r6, r0, #24
 8008f8a:	d501      	bpl.n	8008f90 <_printf_i+0xbc>
 8008f8c:	681d      	ldr	r5, [r3, #0]
 8008f8e:	e003      	b.n	8008f98 <_printf_i+0xc4>
 8008f90:	0645      	lsls	r5, r0, #25
 8008f92:	d5fb      	bpl.n	8008f8c <_printf_i+0xb8>
 8008f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	da03      	bge.n	8008fa4 <_printf_i+0xd0>
 8008f9c:	232d      	movs	r3, #45	@ 0x2d
 8008f9e:	426d      	negs	r5, r5
 8008fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fa4:	4859      	ldr	r0, [pc, #356]	@ (800910c <_printf_i+0x238>)
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	e011      	b.n	8008fce <_printf_i+0xfa>
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	6833      	ldr	r3, [r6, #0]
 8008fae:	0608      	lsls	r0, r1, #24
 8008fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fb4:	d402      	bmi.n	8008fbc <_printf_i+0xe8>
 8008fb6:	0649      	lsls	r1, r1, #25
 8008fb8:	bf48      	it	mi
 8008fba:	b2ad      	uxthmi	r5, r5
 8008fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fbe:	4853      	ldr	r0, [pc, #332]	@ (800910c <_printf_i+0x238>)
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	bf14      	ite	ne
 8008fc4:	230a      	movne	r3, #10
 8008fc6:	2308      	moveq	r3, #8
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fce:	6866      	ldr	r6, [r4, #4]
 8008fd0:	60a6      	str	r6, [r4, #8]
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	bfa2      	ittt	ge
 8008fd6:	6821      	ldrge	r1, [r4, #0]
 8008fd8:	f021 0104 	bicge.w	r1, r1, #4
 8008fdc:	6021      	strge	r1, [r4, #0]
 8008fde:	b90d      	cbnz	r5, 8008fe4 <_printf_i+0x110>
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	d04b      	beq.n	800907c <_printf_i+0x1a8>
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fea:	fb03 5711 	mls	r7, r3, r1, r5
 8008fee:	5dc7      	ldrb	r7, [r0, r7]
 8008ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ff4:	462f      	mov	r7, r5
 8008ff6:	42bb      	cmp	r3, r7
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	d9f4      	bls.n	8008fe6 <_printf_i+0x112>
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d10b      	bne.n	8009018 <_printf_i+0x144>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	07df      	lsls	r7, r3, #31
 8009004:	d508      	bpl.n	8009018 <_printf_i+0x144>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	6861      	ldr	r1, [r4, #4]
 800900a:	4299      	cmp	r1, r3
 800900c:	bfde      	ittt	le
 800900e:	2330      	movle	r3, #48	@ 0x30
 8009010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009014:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009018:	1b92      	subs	r2, r2, r6
 800901a:	6122      	str	r2, [r4, #16]
 800901c:	f8cd a000 	str.w	sl, [sp]
 8009020:	464b      	mov	r3, r9
 8009022:	aa03      	add	r2, sp, #12
 8009024:	4621      	mov	r1, r4
 8009026:	4640      	mov	r0, r8
 8009028:	f7ff fee6 	bl	8008df8 <_printf_common>
 800902c:	3001      	adds	r0, #1
 800902e:	d14a      	bne.n	80090c6 <_printf_i+0x1f2>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b004      	add	sp, #16
 8009036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f043 0320 	orr.w	r3, r3, #32
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	4833      	ldr	r0, [pc, #204]	@ (8009110 <_printf_i+0x23c>)
 8009044:	2778      	movs	r7, #120	@ 0x78
 8009046:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	6831      	ldr	r1, [r6, #0]
 800904e:	061f      	lsls	r7, r3, #24
 8009050:	f851 5b04 	ldr.w	r5, [r1], #4
 8009054:	d402      	bmi.n	800905c <_printf_i+0x188>
 8009056:	065f      	lsls	r7, r3, #25
 8009058:	bf48      	it	mi
 800905a:	b2ad      	uxthmi	r5, r5
 800905c:	6031      	str	r1, [r6, #0]
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	bf44      	itt	mi
 8009062:	f043 0320 	orrmi.w	r3, r3, #32
 8009066:	6023      	strmi	r3, [r4, #0]
 8009068:	b11d      	cbz	r5, 8009072 <_printf_i+0x19e>
 800906a:	2310      	movs	r3, #16
 800906c:	e7ac      	b.n	8008fc8 <_printf_i+0xf4>
 800906e:	4827      	ldr	r0, [pc, #156]	@ (800910c <_printf_i+0x238>)
 8009070:	e7e9      	b.n	8009046 <_printf_i+0x172>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	f023 0320 	bic.w	r3, r3, #32
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	e7f6      	b.n	800906a <_printf_i+0x196>
 800907c:	4616      	mov	r6, r2
 800907e:	e7bd      	b.n	8008ffc <_printf_i+0x128>
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	6825      	ldr	r5, [r4, #0]
 8009084:	6961      	ldr	r1, [r4, #20]
 8009086:	1d18      	adds	r0, r3, #4
 8009088:	6030      	str	r0, [r6, #0]
 800908a:	062e      	lsls	r6, r5, #24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	d501      	bpl.n	8009094 <_printf_i+0x1c0>
 8009090:	6019      	str	r1, [r3, #0]
 8009092:	e002      	b.n	800909a <_printf_i+0x1c6>
 8009094:	0668      	lsls	r0, r5, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0x1bc>
 8009098:	8019      	strh	r1, [r3, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	4616      	mov	r6, r2
 80090a0:	e7bc      	b.n	800901c <_printf_i+0x148>
 80090a2:	6833      	ldr	r3, [r6, #0]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	6032      	str	r2, [r6, #0]
 80090a8:	681e      	ldr	r6, [r3, #0]
 80090aa:	6862      	ldr	r2, [r4, #4]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7f7 f89e 	bl	80001f0 <memchr>
 80090b4:	b108      	cbz	r0, 80090ba <_printf_i+0x1e6>
 80090b6:	1b80      	subs	r0, r0, r6
 80090b8:	6060      	str	r0, [r4, #4]
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	2300      	movs	r3, #0
 80090c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090c4:	e7aa      	b.n	800901c <_printf_i+0x148>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	4632      	mov	r2, r6
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d0ad      	beq.n	8009030 <_printf_i+0x15c>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	079b      	lsls	r3, r3, #30
 80090d8:	d413      	bmi.n	8009102 <_printf_i+0x22e>
 80090da:	68e0      	ldr	r0, [r4, #12]
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	4298      	cmp	r0, r3
 80090e0:	bfb8      	it	lt
 80090e2:	4618      	movlt	r0, r3
 80090e4:	e7a6      	b.n	8009034 <_printf_i+0x160>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4632      	mov	r2, r6
 80090ea:	4649      	mov	r1, r9
 80090ec:	4640      	mov	r0, r8
 80090ee:	47d0      	blx	sl
 80090f0:	3001      	adds	r0, #1
 80090f2:	d09d      	beq.n	8009030 <_printf_i+0x15c>
 80090f4:	3501      	adds	r5, #1
 80090f6:	68e3      	ldr	r3, [r4, #12]
 80090f8:	9903      	ldr	r1, [sp, #12]
 80090fa:	1a5b      	subs	r3, r3, r1
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dcf2      	bgt.n	80090e6 <_printf_i+0x212>
 8009100:	e7eb      	b.n	80090da <_printf_i+0x206>
 8009102:	2500      	movs	r5, #0
 8009104:	f104 0619 	add.w	r6, r4, #25
 8009108:	e7f5      	b.n	80090f6 <_printf_i+0x222>
 800910a:	bf00      	nop
 800910c:	08009fc1 	.word	0x08009fc1
 8009110:	08009fd2 	.word	0x08009fd2

08009114 <_sbrk_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_sbrk_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7f8 f95a 	bl	80013d8 <_sbrk>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_sbrk_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_sbrk_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20002444 	.word	0x20002444

08009134 <_realloc_r>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	4680      	mov	r8, r0
 800913a:	4615      	mov	r5, r2
 800913c:	460c      	mov	r4, r1
 800913e:	b921      	cbnz	r1, 800914a <_realloc_r+0x16>
 8009140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	4611      	mov	r1, r2
 8009146:	f7ff bc73 	b.w	8008a30 <_malloc_r>
 800914a:	b92a      	cbnz	r2, 8009158 <_realloc_r+0x24>
 800914c:	f7ff fc04 	bl	8008958 <_free_r>
 8009150:	2400      	movs	r4, #0
 8009152:	4620      	mov	r0, r4
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	f000 f81a 	bl	8009190 <_malloc_usable_size_r>
 800915c:	4285      	cmp	r5, r0
 800915e:	4606      	mov	r6, r0
 8009160:	d802      	bhi.n	8009168 <_realloc_r+0x34>
 8009162:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009166:	d8f4      	bhi.n	8009152 <_realloc_r+0x1e>
 8009168:	4629      	mov	r1, r5
 800916a:	4640      	mov	r0, r8
 800916c:	f7ff fc60 	bl	8008a30 <_malloc_r>
 8009170:	4607      	mov	r7, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d0ec      	beq.n	8009150 <_realloc_r+0x1c>
 8009176:	42b5      	cmp	r5, r6
 8009178:	462a      	mov	r2, r5
 800917a:	4621      	mov	r1, r4
 800917c:	bf28      	it	cs
 800917e:	4632      	movcs	r2, r6
 8009180:	f7ff fbdc 	bl	800893c <memcpy>
 8009184:	4621      	mov	r1, r4
 8009186:	4640      	mov	r0, r8
 8009188:	f7ff fbe6 	bl	8008958 <_free_r>
 800918c:	463c      	mov	r4, r7
 800918e:	e7e0      	b.n	8009152 <_realloc_r+0x1e>

08009190 <_malloc_usable_size_r>:
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f18      	subs	r0, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfbc      	itt	lt
 800919a:	580b      	ldrlt	r3, [r1, r0]
 800919c:	18c0      	addlt	r0, r0, r3
 800919e:	4770      	bx	lr

080091a0 <_init>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr

080091ac <_fini>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr
